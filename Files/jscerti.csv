Category@Question@Explanation@Answer@isRight@Answer@isRight@...
"JavaScript Zertifikat"@"What expression will return true if 1. let shape1 = {x: 10, y: 20} and 1. let shape2 = {x: 10, y: 20} have the same<br>property values?<br>"@"Question: 1<br>The [removed]shape1.x == shape2.x) && (shape1.y == shape2.y) checks whether the x and y properties of shape1 have<br>the same values as the x and y properties of shape2, respectively. If both conditions are true, the expression returns<br>true, indicating that shape1 and shape2 have the same property values.<br>In the specific example provided, both objects have the same values for the x and y properties, so the expression will<br>evaluate to true. However, note that this expression only checks for equality of the specific properties x and y, and does<br>not check for equality of any additional properties that might exist in the objects.<br>"@"shape1.x == shape2.y "@0@"(shape1.x == shape2.x) && (shape1.y == shape2.y) "@1@"shape1 == shape2 "@0@"Object.keys(shape1) === Object.keys(shape2) "@0
"JavaScript Zertifikat"@"What is the output of the following JavaScript code?<br>let num = 5; <br>let str = ""5""; <br>console.log(num === str); <br>"@"Question: 2<br>The output of this code will be false. In JavaScript, the === operator performs a strict equality comparison. This means<br>that not only do the values being compared need to be the same, but they must also have the same type. In this case,<br>num is a number and str is a string. Even though they have the same value, they are different types, so the comparison<br>returns false.<br>"@False@1@True@0@5@0@"""5"""@0
"JavaScript Zertifikat"@"How can you list all the keys of the object ""point""?<br>"@"Question: 3<br>You can list all the keys of the object ""point"" using one of the following methods:<br>Using the Object.keys() method:<br>let point = {x: 100, y: 200};<br>let keys = Object.keys(point);<br>console.log(keys); // [""x"", ""y""]<br>This method returns an array of the object's own enumerable property names, which in this case are ""x"" and ""y"".<br>Using a for...in loop:<br>let point = {x: 100, y: 200};<br>for (let key in point) {<br>    console.log(key); // ""x"", ""y""<br>}<br>This method iterates over all the enumerable properties of an object, including its prototype chain. In this case, it will only<br>print the own properties ""x"" and ""y"".<br>Both methods will give you an array of the keys or print them to the console.<br>"@"Object.keys(point) "@1@"point.listKeys() "@0@"point.list() "@0@"Not possible"@0
"JavaScript Zertifikat"@"What will be the result of executing the following code:<br>let obj1 = {a: 1}; <br>let obj2 = {b: 2}; <br>let obj3 = Object.assign({c: 3}, obj1, obj2); <br>console.log(obj3); <br>"@"Question: 4<br>The output of the following code will be:<br>{c: 3, a: 1, b: 2}<br>Explanation:<br>Object.assign() is used to copy the values of all enumerable properties from one or more source objects to a target<br>object. In this case, obj3 is the target object, and obj1 and obj2 are the source objects. The properties from the source<br>objects are added to the target object in the order in which they appear in the arguments list. So in this case, the c<br>property is added first, followed by the a and b properties. The resulting object has all three properties: c with a value of<br>3, a with a value of 1, and b with a value of 2.<br>"@"{a: 1, b: 2, c: 3} "@0@"{c: 3} "@0@"{c:3, a: 1, b: 2} "@1@"{a: 1} "@0
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let book = { title: ""To Kill a Mockingbird"", author: ""Harper Lee"" }; <br>let library = Object.assign({}, book, {pages: 324}); <br>book.author = ""John Doe""; <br>console.log(`${library.title} by ${library.author}, ${library.pages} pages`); <br>"@"Question: 5<br>This is because the library object was created by cloning the book object using Object.assign(), and adding a new<br>property pages with a value of 324. Changing the author property of the book object after creating library has no effect<br>on library, as it is a separate object with its own set of properties. <br>"@"To Kill a Mockingbird by Harper Lee, 324 pages"@1@"undefined by John Doe, 324 pages "@0@"100 100 undefined "@0@"'To Kill a Mockingbird' by John Doe, 324 pages "@0
"JavaScript Zertifikat"@"let shape = {x: 100, y: 100} <br>//insert line here <br>shape.show(); <br>What is the correct missing line in order for the console to show the following after running the whole code:<br>100 100<br>"@"Question: 6<br>The correct line to insert is shape.show = function() { console.log(${this.x} ${this.y}); }; because it defines a new<br>method called show on the shape object. This method uses the console.log() function to output the values of the x and y<br>properties of the shape object. When the show method is called on the shape object, it will output the values of the x and<br>y properties to the console, which in this case will be 100 100.<br>"@"shape.show = function() { console.log(`${this.x} ${this.y}`); }; "@1@"point.show = () => console.log(${shape.x} ${shape.y}); "@0@"shape.show = () => console.log(${this.x} ${this.y}); "@0@"point.show = function(){console.log(${this.x} ${this.y})}; "@0
"JavaScript Zertifikat"@"What is the correct way to access the height property in the building object<br>{ name: ""Empire State Building"", height: 443.2 }<br>"@"Question: 7<br>To access the height property in the building object { name: ""Empire State Building"", height: 443.2 }, you can use dot<br>notation as follows: 1. building.height This will return the value 443.2, which is the value assigned to the height property<br>of the building object. <br>"@"building(""height"") "@0@"building.height "@1@"building[""height""] "@0@"building.height(); "@0
"JavaScript Zertifikat"@"What is the correct way to check if a number is an integer in JavaScript? <br>"@"Question: 8<br>In JavaScript, you can check if a number is an integer using the Number.isInteger() method. This method returns true if<br>the passed value is an integer, otherwise it returns false. Here's an example:<br>let num = 42;<br>console.log(Number.isInteger(num)); // Output: true<br>let floatNum = 42.5;<br>console.log(Number.isInteger(floatNum)); // Output: false<br>In addition, you can also check if a value is an integer using the modulo operator (%). If a number is divided by 1 and the<br>remainder is 0, then it's an integer. Here's an example:<br>let num = 42;<br>console.log(num % 1 === 0); // Output: true <br>let floatNum = 42.5;<br>console.log(floatNum % 1 === 0); // Output: false<br>However, the Number.isInteger() method is the recommended way to check if a number is an integer because it is more<br>precise and handles edge cases correctly.<br>"@"Number.isNaN(number) "@0@"number.isInteger() "@0@"Math.ceil(number) === number "@0@"number % 1 === 0 "@1
"JavaScript Zertifikat"@"What will appear on the console after executing the following code? 1. let shape1 = {x: 100, y: 200}; 2. let shape2 =<br>shape1; 3. shape2.x = 0; 4. console.log(`${shape1.x} ${shape2.y}`);<br>"@"Question: 9<br>After executing the given code, the console will display the following output:<br>0 200<br>Here's how the code works:<br>A new object shape1 is created with properties x and y set to 100 and 200, respectively.<br>A new variable shape2 is declared and assigned the value of shape1. This means that both shape1 and shape2 now refer<br>to the same object in memory.<br>The x property of shape2 is set to 0.<br>The values of shape1.x and shape2.y are output to the console. Since shape2.x was changed to 0 in step 3, the output<br>will show 0 for the shape1.x property and 200 for the shape2.y property.<br>Note that since shape1 and shape2 both refer to the same object, changing the value of a property on one object will also<br>change it on the other object.<br>"@"200 100 "@0@"0 100 "@0@"100 200 "@0@"0 200 "@1
"JavaScript Zertifikat"@"What will be the value of foo after executing the following code:<br>let obj = {a: 1}; <br>let foo = obj;<br>obj.a = 2; <br>"@"Question: 10<br>The value of foo will be a reference to the same object as obj. Therefore, after obj.a is changed to 2, foo.a will also be 2.<br>"@"{a: 1} "@0@undefined@0@null@0@"{a: 2}"@1
"JavaScript Zertifikat"@"What is the correct way to define an object ""person"" with properties ""firstName"", ""lastName"", and ""age""?<br>"@"Question: 11<br>There are different ways to define an object ""person"" with properties ""firstName"", ""lastName"", and ""age"". Here is an<br>example:<br>Using object literal notation:<br>let person = {<br>  firstName: ""John"",<br>  lastName: ""Doe"",<br>  age: 30<br>};<br>This creates an object called ""person"" with three properties: ""firstName"" with a value of ""John"", ""lastName"" with a value<br>of ""Doe"", and ""age"" with a value of 30.<br>You can also create the object first and then add the properties using dot notation or bracket notation:<br>let person = {};<br>person.firstName = ""John"";<br>person.lastName = ""Doe"";<br>person.age = 30;<br>Or:<br>let person = {};<br>person[""firstName""] = ""John"";<br>person[""lastName""] = ""Doe"";<br>person[""age""] = 30;<br>Both of these ways will also create an object with the same properties and values. (note in this context const, let and var<br>are interchangeable).<br>"@"const person = {firstName: 'Jane', lastName: 'Doe', age: 30}; "@1@"const person = new Object('firstName' = 'Jane', 'lastName' = 'Doe', 'age' = 30);"@0@"const person = {'firstName': 'Jane', 'lastName': 'Doe', 'age': 30};  "@0@"const person('firstName' = 'Jane', 'lastName' = 'Doe', 'age' = 30); "@0
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let car = { model: ""Tesla"", year: 2022 }; <br>let vehicle = {...car, color: ""red""}; <br>car.year = 2021; <br>console.log(`${vehicle.model} ${vehicle.year} ${vehicle.color}`);<br>"@"Question: 12<br>Tesla 2022 red<br>This is because we created a new object vehicle from the car object using the spread operator (...). We added a new<br>property color with the value ""red"" to the vehicle object. When we changed the value of the year property in the car<br>object to 2021, it did not affect the vehicle object. Therefore, the vehicle object still has the original values of model and<br>year as ""Tesla"" and 2022 respectively, and color as ""red"".<br>"@"Tesla 2021 red"@0@"Tesla 2022 red"@1@"Tesla 2021 blue"@0@"Tesla 2022 black"@0
"JavaScript Zertifikat"@"What will be the value of ""point.x"" after executing the following code?<br>let point = {x: 100, y: 200}; <br>let point2 = point; <br>point2.x = 0; <br>"@"Question: 13<br>The value of ""point.x"" will be 0.<br>In this code, the variable ""point"" is assigned an object with two properties ""x"" and ""y"". Then, a new variable ""point2"" is<br>created and assigned the same object as ""point"". Since objects are reference types in JavaScript, both ""point"" and<br>""point2"" now reference the same object in memory.<br>When the code updates the value of the ""x"" property in ""point2"" to 0, it actually modifies the original object that ""point""<br>also refers to. Therefore, when the value of ""point.x"" is accessed, it returns the updated value of 0.<br>In other words, both ""point"" and ""point2"" refer to the same object in memory, so changes made to the object through one<br>variable will be reflected in the other variable as well.<br>"@0@1@100@0@undefined@0@200@0
"JavaScript Zertifikat"@"How can you list the values assigned to all properties of the person object<br>{ name: ""Emily"", age: 25, city: ""New York"" }<br>"@"Question: 14<br>You can use the Object.values() method to extract an array of all values assigned to properties in the object<br> { name: ""Emily"", age: 25, city: ""New York"" }<br>Here's an example code snippet:<br>const person = { name: ""Emily"", age: 25, city: ""New York"" };<br>const values = Object.values(person);<br>console.log(values);<br>This will output an array of values corresponding to the properties in the object:<br>[ 'Emily', 25, 'New York' ] <br>"@"Object.values(person) "@1@"person.entries() "@0@"person.values() "@0@"person.keys() "@0
"JavaScript Zertifikat"@"What is the correct way to access the name property in the person object<br> { ""name"": ""Jane Doe"" }? <br>"@"Question: 15<br>To access the ""name"" property in the ""person"" object { ""name"": ""Jane Doe"" }, you can use dot notation as follows:<br>person.name<br>This will return the value of the ""name"" property, which in this case is ""Jane Doe"". Dot notation is used to access object<br>properties in JavaScript when you know the property name in advance.<br>Alternatively, you can use square bracket notation as follows: person[""name""]<br>This will also return the value of the ""name"" property. Square bracket notation can be useful when you need to access<br>object properties dynamically, for example, when the property name is stored in a variable or is the result of an<br>expression.<br>"@"person->name "@0@"person[name] "@0@name@0@"person[""name""] "@1
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let point = {x: 100, y: 200}; <br>let point2 = {...point, z: 300}; <br>delete point.x; <br>console.log(${point.x} ${point2.x}); <br>"@"Question: 16<br>The console will display the string ""undefined 100"".<br>In this code, a new object called ""point2"" is created using the spread syntax ... to copy all properties of ""point"" and add a<br>new property ""z"" with a value of 300. Then, the delete keyword is used to delete the ""x"" property from the ""point"" object.<br>Finally, the console.log() method is used to log a string to the console that includes the values of ""point.x"" and ""point2.x"".<br>Since ""point.x"" has been deleted, it is undefined, while ""point2.x"" still has a value of 100. Therefore, the output string is<br>""undefined 100"".<br>"@"null 100"@0@"undefined 100"@1@"undefined undefined"@0@"100 undefined"@0
"JavaScript Zertifikat"@"What is the expression that will add a new property color with a value of ""red"" to the car object<br>{ model: ""Tesla"", year: 2022 }<br>"@"Question: 17<br>The expression to add a new property color with a value of ""red"" to the car object<br>{ model: ""Tesla"", year: 2022 } <br>is:<br>car.color = ""red"";<br>This will add the new property ""color"" with the value ""red"" to the car object. The resulting object will be:<br>{ model: ""Tesla"", year: 2022, color: ""red"" } <br>"@"car.color = ""red"" "@1@"car[""color""][""red""] "@0@"car.property = ""color"", ""red"" "@0@"car.new(""color, ""red"") "@0
"JavaScript Zertifikat"@"What is the output of the following code:<br>let numbers = [1, 2, 3, 4]; <br>let newNumbers = numbers.map(function(number) { return number * 2; }); <br>console.log(newNumbers); <br>"@"Question: 18<br>The output of the code will be:<br>[2, 4, 6, 8]<br>Explanation:<br>The map() method creates a new array with the results of calling a provided function on every element in the original<br>array. In this case, the provided function takes each number in the numbers array and multiplies it by 2, and the resulting<br>array is assigned to the newNumbers variable. The resulting array, [2, 4, 6, 8], is then logged to the console.<br>"@"[0, 2, 4, 6]"@0@"[1, 4, 9, 16]"@0@"[1, 2, 3, 4]"@0@"[2, 4, 6, 8]"@1
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let animal = { species: ""dog"", breed: ""Labrador"" }; <br>let pet = {...animal, name: ""Buddy""}; <br>animal.species = ""cat""; <br>console.log(`${pet.species} ${pet.breed} ${pet.name}`);<br>"@"Question: 19<br>The console will log ""dog Labrador Buddy"".<br>The spread operator {...animal} creates a new object pet with the properties of animal and adds the name property to it.<br>Therefore, pet will have the values { species: ""dog"", breed: ""Labrador"", name: ""Buddy"" }.<br>Changing the value of the species property of the animal object to ""cat"" does not affect the pet object because they are<br>two separate objects.<br>Therefore, pet.species will still have the value ""dog"", pet.breed will have the value ""Labrador"", and pet.name will have<br>the value ""Buddy"".<br>"@"dog Labrador undefined"@0@"cat Labrador undefined"@0@"cat Labrador Buddy"@0@"dog Labrador Buddy"@1
"JavaScript Zertifikat"@"What is the correct way to access the value of property ""brand"" in object ""phone""?<br>"@"Question: 20<br>To access the value of property ""brand"" in object ""phone"", you can use dot notation or bracket notation. Here are the<br>examples:<br>Using dot notation:<br>let phone = { brand: ""Apple"", model: ""iPhone"" };<br>console.log(phone.brand); // Output: Apple<br>Using bracket notation:<br>let phone = { brand: ""Apple"", model: ""iPhone"" };<br>console.log(phone[""brand""]); // Output: Apple<br>Both of these ways are valid and will output the same result. Dot notation is used more commonly when the property<br>name is a valid identifier name, while bracket notation is more flexible as it allows you to access properties with names<br>that are not valid identifier names, such as properties with spaces or special characters.<br>"@"phone->""brand""; "@0@"phone.getBrand(); "@0@phone[brand];@0@"phone.brand; "@1
"JavaScript Zertifikat"@"Which of the following expressions returns true if the object ""point"" has a property ""x""?<br>"@"Question: 21<br>The expression ""x"" in point returns true if the object ""point"" has a property with the name ""x"".<br>In JavaScript, the ""in"" operator is used to check whether a property exists in an object. It returns true if the specified<br>property exists in the object and false otherwise.<br>So, in this case, the expression ""x"" in point checks if the object ""point"" has a property named ""x"". If the object has such a<br>property, the expression evaluates to true. If the object doesn't have a property named ""x"", the expression evaluates to<br>false.<br>Therefore, if the object ""point"" has a property named ""x"", the expression ""x"" in point will return true. If the object doesn't<br>have a property named ""x"", the expression will return false.<br>"@"x in point "@0@"""x"" in point "@1@"point.contains(x) "@0@"point.exists(x) "@0
"JavaScript Zertifikat"@"What will be the value of x after the following code is executed?<br>let x = 10; <br>function add5(num) {<br> num += 5; <br> return num;<br>} <br>x = add5(x); <br>"@"Question: 22<br>The value of x will be 15 after the code is executed.<br>The function add5 takes a number as an argument and adds 5 to it. The function is called with the variable x as the<br>argument, which has the value of 10. The function returns the value 15, which is then assigned back to the variable x.<br>Therefore, the value of x becomes 15.<br>"@"None of the Above"@0@10@0@15@1@5@0
"JavaScript Zertifikat"@"What is the output of the following code?<br>let object1 = { prop1: ""value1"" }; <br>let object2 = Object.create(object1); <br>object2.prop2 = ""value2""; <br>delete object2.prop1; <br>console.log(object2.prop1); <br>"@"Question: 23<br>The output of the following code will be undefined.<br>The code creates an object object1 with a property prop1 set to the string ""value1"". The object2 is then created as a new<br>object which prototype is set to object1 using Object.create(). Then, object2 is assigned a new property prop2 with a<br>value of ""value2"". Finally, the delete operator is used to remove the prop1 property from object2.<br>Since prop1 is a property of the prototype of object2 (i.e., it belongs to object1), deleting it only removes it from object2,<br>not from object1. Therefore, when we try to access object2.prop1, it returns undefined because object2 does not have its<br>own prop1 property, and it is not found in the prototype chain either.<br>"@"ReferenceError: prop1 is not defined "@0@undefined@1@null@0@"""value1"" "@0
"JavaScript Zertifikat"@"What is the output of the following code?<br>let obj1 = {a: 10, b: 20}; <br>let obj2 = Object.create(obj1); <br>obj2.c = 30; <br>console.log(obj2.a + "" "" + obj2.b + "" "" + obj2.c); <br>"@"Question: 24<br>The output of the following code will be:<br>10 20 30<br>Explanation:<br>obj1 is an object with properties a and b set to 10 and 20 respectively.<br>obj2 is created using Object.create() method, with obj1 as its prototype. Therefore, obj2 inherits the properties of obj1.<br>obj2 has a new property c set to 30.<br>When console.log() is called, it outputs the values of obj2.a, obj2.b, and obj2.c, which are 10, 20, and 30 respectively.<br>"@"undefined undefined 30"@0@"10 20 undefined"@0@"10 20 30"@1@"undefined 20 30"@0
"JavaScript Zertifikat"@"What will be the output of the following JavaScript code?<br>let x = 10; <br>let y = 20; <br>let z = 30; <br>let obj = {x, y, z}; <br>console.log(Object.keys(obj)); <br>"@"Question: 25<br>The output of the code will be an array containing the keys of the object obj, which are ""x"", ""y"", and ""z"".<br>So the output will be:<br>[ ""x"", ""y"", ""z"" ]<br>Explanation:<br>Three variables x, y, and z are declared and initialized with values of 10, 20, and 30 respectively.<br>An object obj is declared using object literal notation, with three properties x, y, and z that have the same names as the<br>variables and the same values as the variables.<br>Object.keys(obj) returns an array of the keys of the obj object, which are ""x"", ""y"", and ""z"".<br>The console.log() statement outputs the array returned by Object.keys(obj) to the console.<br>"@"[""x"", ""y"", ""z""]"@1@"[""10"", ""20"", ""30""]"@0@"[x, y, z]"@0@"[10, 20, 30]"@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>let arr = [1, 2, 3, 4]; <br>let arr2 = arr; <br>arr2.push(5); <br>console.log(arr); <br>"@"Question: 26<br>The code initializes an array arr with the values [1, 2, 3, 4].<br>Then, it assigns arr to arr2, which means arr2 is referencing the same array object as arr. They both point to the same<br>memory location.<br>Next, arr2.push(5) is called, which adds the value 5 to the end of the array referenced by both arr and arr2.<br>Finally, console.log(arr) is executed, which outputs the content of arr. Since arr and arr2 are referencing the same array,<br>the output will include the added element 5, resulting in [1, 2, 3, 4, 5].<br>"@"[1, 2, 3, 4, 5, 5]"@0@"[5, 1, 2, 3, 4]"@0@"[1, 2, 3, 4]"@0@"[1, 2, 3, 4, 5]"@1
"JavaScript Zertifikat"@"What is the value of property ""z"" after executing the following code?<br>let obj = {x: 100, y: 200}; <br>let obj2 = Object.create(obj); <br>obj2.z = 300; <br>"@"Question: 27<br>The value of property ""z"" in ""obj2"" will be 300.<br>This code creates a new object called ""obj"" with properties ""x"" and ""y"". Then, a new object called ""obj2"" is created using<br>Object.create() and ""obj"" is passed as the prototype object. This means that ""obj2"" inherits the properties of ""obj"", which<br>in this case are ""x"" and ""y"".<br>Finally, a new property ""z"" is added to ""obj2"" with a value of 300. Therefore, the value of ""z"" in ""obj2"" is 300.<br>"@100@0@200@0@undefined@0@300@1
"JavaScript Zertifikat"@"What will be the value of obj.property after the following code is executed?<br>let obj = {property: 10};<br>function add5(o) {<br>  o.property += 5;<br> return o;<br>}<br>obj = add5(obj);<br>"@"Question: 28<br>After executing the above code, the value of obj.property will be 15.<br>The add5 function takes an object as an argument, accesses its property property, and adds 5 to it. The modified object<br>is then returned from the function.<br>In the last line of code, the add5 function is called with obj as its argument. The modified object is then assigned back to<br>the obj variable. Therefore, obj.property will have a value of 15.<br>"@15@1@"None of the above"@0@5@0@10@0
"JavaScript Zertifikat"@"What is the output of the following JavaScript code?<br>let obj = {a: 1, b: 2};<br>let clone = Object.assign({}, obj); <br>clone.a = 3; <br>console.log(obj.a, clone.a); <br>"@"Question: 29<br>The output of the code will be 1 3.<br>Explanation:<br>An object obj is declared with two properties a and b with values of 1 and 2, respectively.<br>A new object clone is created using Object.assign(), which creates a shallow copy of the obj object by copying its<br>enumerable own properties into the new object.<br>The clone.a = 3 statement modifies the value of the a property in the clone object to 3.<br>The console.log() statement outputs the value of the a property in both the obj and clone objects to the console. Since<br>obj.a was not modified, its value is still 1, while clone.a was modified to 3.<br>"@"1 3"@1@"3 1"@0@"1 1"@0@"3 3"@0
"JavaScript Zertifikat"@"What is the expression that will check if the key age is present in the person object<br>{ name: ""John Smith"", age: 32 }<br>"@"Question: 30<br>To check if the key ""age"" is present in the object { name: ""John Smith"", age: 32 }, you can use the ""in"" operator as<br>follows:<br>""age"" in { name: ""John Smith"", age: 32 }<br>This will return true if the ""age"" key is present in the object, and false otherwise.<br>"@"age in person "@0@"person.contains(age) "@0@"age.in(person) "@0@"""age"" in person "@1
"JavaScript Zertifikat"@"What is the value of ""z"" after executing the following code?<br>let point = {x: 100, y: 200}; <br>let point2 = Object.create(point); <br>point2.z = 300; <br>"@"Question: 31<br>The value of ""z"" in ""point2"" will be 300.<br>In this code, a new object called ""point"" is created with two properties ""x"" and ""y"". Then, a new object called ""point2"" is<br>created using the Object.create() method, with ""point"" as its prototype.<br>When the code adds a new property ""z"" to ""point2"" with a value of 300, it creates a new property in the ""point2"" object,<br>which is not present in the ""point"" object. Therefore, the value of ""z"" in ""point2"" is 300, while ""point"" still only has the ""x""<br>and ""y"" properties.<br><br>"@300@1@100@0@null@0@undefined@0
"JavaScript Zertifikat"@"What is the correct way to add property ""z"" to object ""point"" with value 300?<br>"@"Question: 32<br>To add the property ""z"" with the value 300 to the ""point"" object, you can use either dot notation or square bracket<br>notation as follows:<br>Using dot notation:<br>point.z = 300;<br>Using square bracket notation:<br>point[""z""] = 300;<br>Both of these approaches will add a new property ""z"" with the value 300 to the ""point"" object. Dot notation is typically<br>used when the property name is known in advance, whereas square bracket notation is used when the property name is<br>determined at runtime or when it contains special characters or spaces.<br>"@"point.push({z: 300}); "@0@"point.z = 300 "@1@"point += {z: 300}; "@0@"Object.defineProperties(point, {z: 300}); "@0
"JavaScript Zertifikat"@"What is the value of property ""y"" in object ""point2"" after the following code is executed?<br>let point = {x: 100, y: 200}; <br>let point2 = {...point}; <br>point2.y = 300; <br>"@"Question: 33<br>The value of property ""y"" in object ""point2"" will be 300.<br>The code first declares an object called ""point"" with two properties ""x"" and ""y"", and then creates a new object called<br>""point2"" using the spread operator to copy all the properties from ""point"".<br>Then, the code updates the value of the ""y"" property in ""point2"" to 300. This change only affects the ""y"" property in<br>""point2"" and does not affect the original object ""point"".<br>Therefore, after the code is executed, the value of the ""y"" property in ""point2"" is 300, while the value of the ""y"" property<br>in the original object ""point"" remains unchanged at 200.<br>"@undefined@0@100@0@300@1@200@0
"JavaScript Zertifikat"@"What should be the declaration of the ""point"" object so that when you call ""console.log(point.x)"", the value of x appears<br>in the console?<br>"@"Question: 34<br>The answer is<br>let point = {x: 10};<br>because it declares a JavaScript object called ""point"" with a property called ""x"" whose value is 10. When you call<br>""console.log(point.x)"", the value of ""x"" (which is 10) will be printed to the console.<br>In JavaScript, objects are created using curly braces {} and are made up of key-value pairs, where the key is a string that<br>acts as a unique identifier for the value it holds. In this case, the key is ""x"" and the value is 10.<br>When you access a property of an object using dot notation (e.g., point.x), JavaScript looks up the key (in this case, ""x"")<br>in the object and returns the corresponding value (in this case, 10). Calling ""console.log(point.x)"" thus prints the value of<br>""x"" (which is 10) to the console.<br>"@"let x = 10; "@0@"let point.add(x, 10) "@0@"let point = (x: 10);"@0@"let point = {x: 10}; "@1
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let phone = { brand: ""Apple"", model: ""iPhone"" }; <br>let cell = phone; <br>cell.model = ""Samsung""; <br>console.log(`${phone.brand} ${phone.model}`); <br><br>"@"Question: 35<br>The output on the console will be:<br>Apple Samsung<br>This is because the code declares an object called ""phone"" with two properties ""brand"" and ""model"". It then creates a<br>new variable called ""cell"" and assigns it the same object as ""phone"" (i.e., they both refer to the same object in memory).<br>When the code updates the ""model"" property of ""cell"" to ""Samsung"", it actually modifies the original object that ""phone""<br>also refers to. Therefore, when the code prints the ""brand"" and ""model"" properties of ""phone"" using console.log, it will<br>show the updated value of ""model"", which is ""Samsung"".<br>"@"Apple IPhone"@0@"Samsung Samsung"@0@"Samsung IPhone"@0@"Apple Samsung"@1
"JavaScript Zertifikat"@"How can you check if the object ""point"" is frozen?<br>"@"Question: 36<br>This code first checks if the object ""point"" is frozen using the Object.isFrozen() method. If the method returns true, the<br>console will log the string ""point is frozen"". Otherwise, if the method returns false, the console will log the string ""point is<br>not frozen"".<br>"@"Object.freeze(point) === true "@0@"point.isFreeze() "@0@point.isFrozen()@0@"Object.isFrozen(point) "@1
"JavaScript Zertifikat"@"What will be the output of the following code?<br>let point = {x: 100, y: 100}; <br>let point2 = Object.assign({}, point, {x: 0, z: 300}); <br>console.log(${point2.x} ${point2.y} ${point2.z}); <br>"@"Question: 37<br>The console will display the string ""0 100 300"".<br>In this code, a new object called ""point2"" is created using the Object.assign() method. The first argument is an empty<br>object, and the subsequent arguments are the objects to be merged into the first object.<br>In this case, ""point"" is the second argument, which means that all its properties are copied into the new object. Then, the<br>third argument {x: 0, z: 300} is merged into the new object, overwriting the value of ""x"" to 0 and adding the new<br>property ""z"" with a value of 300.<br>Finally, the console.log() method is used to log a string to the console that includes the values of ""point2.x"", ""point2.y"",<br>and ""point2.z"". The output string is ""0 100 300"", because ""point2.x"" has been changed to 0, while ""point2.y"" and<br>""point2.z"" have been added with their respective values.<br>"@"100 0 300"@0@"0 100 300"@1@"100 200 undefined"@0@"100 200 300"@0
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let point = {x: 100, y: 200}; <br>let point2 = Object.assign({}, point); <br>point2.x = 0; <br>console.log(${point.x} ${point2.x}); <br>"@"Question: 38<br>The console will display the string ""100 0"".<br>In this code, a new object called ""point2"" is created by using the Object.assign() method to copy all the properties of<br>""point"" into a new empty object.<br>Then, the value of the ""x"" property in ""point2"" is updated to 0. This change only affects the ""x"" property in ""point2"" and<br>does not affect the original object ""point"".<br>Finally, the console.log() method is used to log a string to the console that includes the values of ""point.x"" and ""point2.x"".<br>Since ""point.x"" has a value of 100 and ""point2.x"" has a value of 0, the string ""100 0"" will be logged to the console.<br>"@"0 0"@0@"0 100"@0@"100 100"@0@"100 0"@1
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let shape = {x: 100, y: 100}; <br>let shape2 = Object.assign({}, shape, {x: 0, z: 200});<br>shape.y = 0;<br>console.log(`${shape2.x} ${shape2.y} ${shape2.z}`); <br>"@"Question: 39<br>After executing the given code, the console will display the following output:<br>0 100 200<br>Here's how the code works:<br>A new object shape is created with properties x and y set to 100.<br>A new object shape2 is created using Object.assign(). The first argument {} specifies the target object to which<br>properties will be assigned (in this case, a new empty object). The second argument shape specifies the source object<br>from which properties will be copied. The third argument {x: 0, z: 200} specifies additional properties to add or<br>overwrite. The resulting object has properties x, y, and z set to 0, 100, and 200, respectively.<br>The value of the y property of shape is set to 0.<br>The values of shape2.x, shape2.y, and shape2.z are output to the console. Since shape2.x and shape2.z were set to 0<br>and 200 in step 2, respectively, the output will show 0 for shape2.x and 200 for shape2.z. Since shape2.y was not<br>modified in the subsequent steps, it retains its original value of 100.<br>Note that the Object.assign() method creates a new object, and does not modify the original shape object or any other<br>objects used as arguments.<br>"@"100 100 200"@0@"0 0 200"@0@"0 100 200"@1@"100 0 200"@0
"JavaScript Zertifikat"@"What will appear on the console after executing the following code?<br>let shape = {x: 100, y: 100}; <br>let shape2 = {...shape, z: 300}; <br>shape.x = 0; <br>console.log(`${shape2.x} ${shape2.y} ${shape2.z}`); <br>"@"Question: 40<br>The code will output 100 100 300 on the console.<br>This is because the spread syntax (...) is used to create a new object shape2 that inherits the properties of shape (i.e., x<br>and y) and adds a new property z with a value of 300. Even though the value of x in shape is changed to 0, it does not<br>affect the value of x in shape2 which is still 100. So, when console.log is called, it outputs the values of shape2.x,<br>shape2.y, and shape2.z, which are 100, 100, and 300, respectively.<br>"@"100 100 300"@1@"0 100 300"@0@"200 100 300"@0@"300 100 300"@0
"JavaScript Zertifikat"@"What will appear in the console as a result of executing the following code snippet?<br>class Person{} <br>class Employee extends Person{}<br>class Manager extends Employee{} <br>let manager = new Manager(); <br>console.log(`${manager instanceof Person} ${manager instanceof Employee} ${manager instanceof Manager}`); <br>"@"Question: 41<br>The following will appear in the console as a result of executing the code snippet:<br>true true true<br>This is because Manager is a subclass of Employee, which is a subclass of Person. Therefore, manager is an instance of all<br>three classes: Person, Employee, and Manager. The instanceof operator checks if an object is an instance of a given<br>class, including subclasses.<br>"@"true true true"@1@"false true false"@0@"true false false"@0@"false false false"@0
"JavaScript Zertifikat"@"What is the output of the following code snippet?<br>class Animal {}; <br>class Dog extends Animal {}; <br>let dog = new Dog(); <br>console.log(dog instanceof Animal); <br>"@"Question: 42<br>The output of the following code snippet is:<br>true<br>Explanation:<br>The Dog class extends the Animal class, which means that it inherits all of its properties and methods. When an instance<br>of Dog is created using the new operator, it is also an instance of Animal, since it inherits from it. Therefore, dog<br>instanceof Animal returns true.<br>"@Dog@0@Animal@0@true@1@false@0
"JavaScript Zertifikat"@"What is the output of the following code snippet?<br>class Shape{}; <br>class Pyramid extends Shape{}; <br>class SquareBasedPyramid extends Pyramid {}; <br>let shape = new SquareBasedPyramid (); <br>console.log(`${shapeinstance of Shape} ${shape instance of Pyramid } ${shape instance of SquareBasedPyramid }`) <br>"@"Question: 43<br>Output:<br>true true true<br>The output indicates that shape is an instance of all three classes: Shape, Pyramid, and SquareBasedPyramid. This is<br>because SquareBasedPyramid inherits from Pyramid, which in turn inherits from Shape.<br>"@"true true true"@1@"false false true"@0@"true false true"@0@"false false false"@0
"JavaScript Zertifikat"@"There is one line missing in the code below:<br>class A { <br>_x = 0; <br>// Insert line of code here<br>} <br>let a = new A(); <br>a.x = 10; <br>console.log(a._x); <br>Select the correct missing line so that the executed code results in the following console output: 10<br>"@"Question: 44<br>The missing line of code is<br>set x(value) { this._x = value; }<br>This is because when the line ""a.x = 10"" is executed, it invokes the ""set x"" method, which sets the value of ""_x"" to the<br>passed value of ""10"". The underscore in front of ""_x"" indicates that it is a private variable, which means that it can only<br>be accessed within the class. Therefore, in order to set its value from outside the class, we need to use the ""set x""<br>method. Finally, when the console.log statement is executed, it outputs the value of ""_x"", which has been set to 10.<br>"@"x() { return this._x; } "@0@"get x() { return this._x; } "@0@"this.x = function() { return this._x; } "@0@"set x(value) { this._x = value; } "@1
"JavaScript Zertifikat"@"previous class has been defined)<br>"@"Question: What is the correct syntax for creating a ""User"" object with the name ""John"" and role ""Admin""? (note no<br>There are different ways to create objects in JavaScript, but one possible way to create a ""User"" object with the name<br>""John"" and role ""Admin"" without defining a class is by using an object literal notation, like this:<br>let User = {   name: ""John"",   role: ""Admin"" }; <br>This creates a new object with two properties: ""name"" with the value ""John"" and ""role"" with the value ""Admin"".<br>"@"User = new User(""John"", ""Admin""); "@0@"new User(""John"", ""Admin""); "@0@"User(""John"", ""Admin""); "@0@"let User = {name: ""John"", role: ""Admin""}"@1
"JavaScript Zertifikat"@"What is the correct code for declaring a class Shape that has a method calculateArea and a private property _sides which<br>can be set in the constructor?<br>"@"Question: 46<br>The code is correct for declaring a class Shape that has a method calculateArea and a private property _sides which can<br>be set in the constructor.<br>In the constructor, the private property _sides is declared with the this keyword, which means it can be accessed within<br>the class. The underscore before the property name is a convention used to indicate that it should not be accessed from<br>outside the class.<br>The calculateArea method is declared outside of the constructor using the standard method syntax. This means it is a<br>public method that can be called from outside the class.<br>Overall, this code follows best practices for declaring private properties and public methods in a class in JavaScript.<br>"@"class Shape {  constructor(sides) {  sides = sides;  }  calculateArea() {  // implementation  } } "@0@"class Shape {  constructor(sides) {  this.sides = sides;  } calculateArea() {  // implementation  } } "@0@"class Shape {  calculateArea()  {  // implementation  }  constructor(sides) {  _sides = sides;  } } "@0@"class Shape {  constructor(sides) { this._sides = sides;  }  calculateArea()  {  // implementation  } } "@1
"JavaScript Zertifikat"@"A class may have a constructor called...<br>"@"Question: 47<br>A class may have a constructor called constructor(). The constructor is a special method that is executed when a new<br>instance of the class is created, and it can be used to initialize the properties of the class. It is defined using the<br>constructor keyword followed by parentheses and the method body. The constructor can accept parameters, which can<br>be used to set the initial values of the properties of the class.<br>"@constructor@1@"Name of the class"@0@"constructor ""name"""@0@"this "@0
"JavaScript Zertifikat"@"What line of code should be inserted into the A class definition to declare a property named test and initialize it with the<br>value 10?<br>class A {<br> // insert code here <br>} <br><br>"@"Question: 48<br>The line of code to insert in the A class definition to declare a property named test and initialize it with the value 10 is:<br>class A {<br>  test = 10;<br>} <br>"@"test = 10; "@1@"this.test = 10; "@0@"var test = 10; "@0@"let test = 10; "@0
"JavaScript Zertifikat"@"A static method defined in a class is...<br>"@"Question: 49<br>A static method defined in a class is bound to the class only and will not be available in any objects which are instances<br>of it because a static method belongs to the class itself, rather than to any instance of the class. This means that it can<br>be called on the class directly, without the need for an instance of the class to be created.<br>Since a static method belongs to the class and not to its instances, it cannot access any instance-specific properties or<br>methods. It can only access static properties or other static methods that belong to the same class.<br>In summary, static methods in a class are designed to provide functionality that is specific to the class, rather than to any<br>of its instances.<br>"@"Is available only in class instances"@0@"Is bound to the class only will not be available in any objects which are instances from it."@1@"Available for both the class and instances of the class"@0@"Is only available within the class"@0
"JavaScript Zertifikat"@"JavaScript classes are first-class citizens, which means that...<br>"@"Question: 50<br>JavaScript classes are first-class citizens, which means that they can be passed as arguments to functions, returned from<br>functions, assigned to variables, and stored in data structures just like any other value or object. This makes classes very<br>flexible and powerful in JavaScript, as they can be used to create complex data structures, modularize code, and provide<br>an object-oriented programming paradigm.<br>"@"Classes take memory priority"@0@"Classes must be declared at the beginning of the code"@0@"Classes are the most important components of the language"@0@"Classes can be written to variables, among other things."@1
"JavaScript Zertifikat"@"What is the correct code to declare a class ""Rectangle"" with a constructor that takes two arguments ""width"" and ""height"",<br>and a method ""calcArea"" that calculates and returns the area of the Rectangle instance?<br>this.width * this.height;  } } <br>this.width * this.height; } }<br>height;  } }<br>this.width * this.height;  }} <br>"@"Question: 51<br>This code is the correct way to declare a class Rectangle. It has a constructor that takes two arguments, width and<br>height, and sets the corresponding properties on the instance. The class also has a method calcArea that calculates and<br>returns the area of the rectangle instance by multiplying its width and height.<br>Overall, this code follows the conventions and best practices of class declaration in JavaScript, and provides a clear and<br>straightforward implementation of a Rectangle class with a method to calculate its area.<br>"@"function Rectangle(width, height) {  this.width = width;  this.height = height;  this.calcArea = function() {  return"@0@"class Rectangle(width, height) {  this.width = width;  this.height = height;  this.calcArea = function() {  return"@0@"class Rectangle {  constructor(width, height);  this.width = width;  this.height = height;  calcArea() {  return width *"@0@"class Rectangle { constructor(width, height) { this.width = width;  this.height = height;  } calcArea() { return"@1
"JavaScript Zertifikat"@"What line of code should be inserted into the Person class definition to add a method greet to the class that outputs<br>""Hello, I am [name]""?<br>class Person { constructor(name)<br> { <br>  this.name = name; <br>  // insert code here <br> } <br>} <br>"@"Question: 52<br>The code<br>this.greet = function() { console.log(Hello, I am ${this.name}); }<br>should be inserted into the Person class definition to add a method greet to the class that outputs ""Hello, I am [name]"".<br>This line of code defines a method called greet on each instance of the Person class. When called, the method logs a<br>message to the console that includes the name of the person instance. By using the this keyword, the method has access<br>to the name property of the instance on which it is called.<br>"@"greet: function() { console.log(Hello, I am ${this.name}); } "@0@"greet() { console.log(Hello, I am ${this.name}); } "@0@"this.greet = function() { console.log(Hello, I am ${this.name}); }"@1@"function greet() { console.log(Hello, I am ${this.name}); } "@0
"JavaScript Zertifikat"@"What is the correct syntax for creating an instance of the class Vehicle with the property make set to ""Toyota""?(assuming<br>there's no constructor)<br>"@"Question: 53<br>Assuming the class Vehicle has a property named make, the correct syntax for creating an instance of the class with the<br>property make set to ""Toyota"" is:<br>let vehicle = new Vehicle(); vehicle.make = ""Toyota"";<br>"@"Vehicle car = new Vehicle(""Toyota"");"@0@"Vehicle(""Toyota""); "@0@"let car = new Vehicle; car.make = ""Toyota"";"@1@"let car = new Vehicle(""Toyota"");"@0
"JavaScript Zertifikat"@"What line of code should be inserted into the Product class definition to add a property price to the class?<br>class Product { <br> constructor(name) <br> { <br>   this.name = name; <br>   // insert code here <br> }<br>}<br>"@"Question: 54<br>To add a property price to the Product class, the following line of code can be inserted:<br>this.price = 0;<br>This will initialize the price property to 0.  It's also worth noting that the constructor function can also accept a price<br>parameter and assign its value to the price property. The code can look like this:<br>class Product { <br> constructor(name, price) { <br>   this.name = name; <br>   this.price = price || 0; <br> }<br>}<br>This code will initialize the price property to the value of the price parameter, or to 0 if the price parameter is not<br>provided.<br>"@"price: 0;"@0@"this.price = 0;"@1@"var price = 0;"@0@"let price = 0;"@0
"JavaScript Zertifikat"@"Which line of code should be inserted in the following code snippet to declare a method showInfo in class A that displays<br>the string ""Hi"" in the console?<br>class A { <br> constructor(){<br>  // insert line of code here <br> }<br>} <br>let a = new A();<br>a.showInfo(); <br>"@"Question: 55<br>To declare a method showInfo in class A that displays the string ""Hi"" in the console, the following line of code can be<br>inserted inside the constructor:<br>this.showInfo = function() {<br>  console.log(""Hi"");<br>};<br>So the updated code will be:<br>class A {<br>  constructor(){<br>    this.showInfo = function() {<br>      console.log(""Hi"");<br>    };<br>  }<br>} <br>let a = new A();<br>a.showInfo()<br>"@"showInfo = function() {console.log(""Hi"");}; "@0@"this.showInfo = function() {console.log(""Hi"");}; "@1@"static showInfo() {console.log(""Hi"");}; "@0@"function showInfo() {console.log(""Hi"");}; "@0
"JavaScript Zertifikat"@"Analyze the following code:<br>class Shape { <br> #x = 0; <br> #y = 0; <br> sides= 3; <br>} <br>let shape = new Shape(); <br>console.log(Object.keys(shape));<br>"@"Question: 56<br>The code defines a class Shape with two private properties #x and #y initialized to 0, and a public property sides<br>initialized to 3. It then creates a new instance of the Shape class and logs the keys of the object using Object.keys().<br>Since #x and #y are private properties, they are not enumerable and therefore not included in the output of<br>Object.keys(). Only the public property sides will be included in the output.<br>Therefore, the output of the code will be an array containing the single element ""sides"".<br>"@[]@0@"[""x"", ""y""]"@0@"[""sides""]"@1@"[""x"", ""y"", ""sides""]"@0
"JavaScript Zertifikat"@"What will be the result of the code below?<br>class A { <br> _test = 0; <br> set test(value) {<br> this._test = value; <br> } <br>}<br>let a = new A(); <br>a.test = 10; <br>console.log(a._test); <br>"@"Question: 57<br>The code will output 10 in the console.<br>This is because the code defines a class A with a private property _test and a setter method test that sets the value of<br>_test. Then it creates an instance a of class A and sets its test property to 10. Since the test property is a setter method,<br>it sets the value of the private property _test to 10. Finally, the code logs the value of _test (which has been set to 10) to<br>the console using console.log(a._test);.<br>"@"ReferenceError: a is not defined "@0@"Error: a.test is not a function "@0@10@1@undefined@0
"JavaScript Zertifikat"@"What line of code should be inserted in the class A definition to produce the output ""Hi"" when the code is executed?<br>class A <br>{ <br>  //Insert line of code here <br>} <br>let a = new A(); <br>a.showInfo();<br>"@"Question: 58<br>The line showInfo = function() { console.log(""Hi""); }; should be inserted in the class A definition to produce the output<br>""Hi"" when the code is executed because it creates a method called showInfo on instances of the class A. When<br>a.showInfo() is called, it will execute the function that was assigned to the showInfo property of a.<br>Note that since showInfo is not declared with let, const, or var, it is created as a global variable. To avoid polluting the<br>global namespace, it's recommended to use this.showInfo = function() { console.log(""Hi""); }; instead, which creates<br>"@"showInfo: function() { console.log(""Hi""); }; "@0@"showInfo() { console.log(""Hi""); };"@1@"function showInfo() { console.log(""Hi""); }; "@0@"showInfo = function() { console(""Hi""); }; "@0@"showInfo as a method on instances of the class "@0
"JavaScript Zertifikat"@"What will appear in the console as a result of executing the following code snippet?<br>class A { <br> _test = 0; <br> set test(value) { <br>  this._test = value; <br> } <br>} <br>let a = new A(); <br>a.test = 10; <br>console.log(a._test);<br>"@"Question: 59<br>The output in the console will be:<br>10<br>Explanation:<br>The code defines a class A with a private property _test and a setter method test that sets the value of _test to the<br>provided value. The let a = new A(); statement creates a new instance of A and assigns it to the variable a. The a.test =<br>10; statement calls the test setter method and sets the value of _test to 10. Finally, the console.log(a._test); statement<br>outputs the value of _test which is 10.<br>Note that accessing a private property such as _test directly outside of the class is generally not recommended, as it<br>violates encapsulation principles. In this case, it would be better to define a public getter method in the class to access<br>the value of _test.<br>"@10@1@undefined@0@NaN@0@null@0
"JavaScript Zertifikat"@"What is the output of the following code snippet?<br>class Book {}; <br>class Magazine extends Book {}; <br>let article = new Magazine(); <br>console.log(article instanceof Book); <br>"@"Question: 60<br>The output of the following code snippet will be true.<br>Explanation:<br>A class Book is defined.<br>A class Magazine is defined which extends Book.<br>An object article is created as an instance of the Magazine class.<br>The instanceof operator checks if the article object is an instance of the Book class. Since Magazine extends Book, article<br>is considered an instance of Book and the output will be true.<br>"@false@0@Magazine@0@true@1@Book@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>class Rectangle {<br> _width = 0;<br> _height = 0;<br> set width(value) {<br>  this._width = value;<br> }<br> get width() {<br>  return this._width;<br> }<br> set height(value) {<br>  this._height = value;<br> }<br> get height() {<br>  return this._height;<br> }<br>}<br>let rectangle = new Rectangle();<br>rectangle.width = 10;<br>rectangle.height = 5; <br>console.log(rectangle.width * rectangle.height); <br>"@"Question: 61<br>The output of the following code will be 50.<br>Explanation:<br>The code defines a class Rectangle with private properties _width and _height and setters and getters for them.<br>Then, an instance of Rectangle is created and its width and height properties are set to 10 and 5, respectively.<br>Finally, the product of rectangle.width and rectangle.height is logged to the console, which is 10 * 5 = 50.<br>"@50@1@5@0@10@0@0@0
"JavaScript Zertifikat"@"What is the output of the following code snippet?<br>class Rectangle {}; <br>let square = new Rectangle(); <br>console.log(square instanceof Rectangle); <br>"@"Question: 62<br>The output of the following code snippet will be true.<br>Explanation:<br>A class Rectangle is defined.<br>A new instance of Rectangle is created using the new keyword and assigned to the variable square.<br>The instanceof operator is used to check if square is an instance of Rectangle.<br>Since square is created using the Rectangle class, the output will be true.<br>"@true@1@Rectangle@0@square@0@false@0
"JavaScript Zertifikat"@"What line of code should be inserted into the Car class definition to add a method drive to the class that outputs ""Driving<br>[make] [model]""?<br>class Car { <br> constructor(make, model) <br> { <br>  this.make = make; <br>  this.model = model; <br>  // insert code here <br> } <br>} <br>"@"Question: 63<br>The line of code that should be inserted into the Car class definition to add a method drive to the class that outputs<br>""Driving [make] [model]"" is:<br>this.drive() { console.log(`Driving ${this.make} ${this.model}`); }<br>This adds a method drive to the Car class that outputs the make and model of the car being driven.<br>"@"function drive() { console.log(`Driving ${this.make} ${this.model}`); } "@0@"drive() { console.log(`Driving ${this.make} ${this.model}`); } "@0@"this.drive = function() { console.log(`Driving ${this.make} ${this.model}`); } "@1@"drive: function() { console.log(`Driving ${this.make} ${this.model}`); } "@0
"JavaScript Zertifikat"@"Analyze the following code:<br>class Point { <br> constructor(x, y) <br> { <br>  this.x = x; <br>  this.y = y; <br> } <br> setColor(color) { <br>  this.color = color; <br> } <br>} <br>let point = new Point(0, 200); <br>point.setColor(""red"");<br>What properties does ""point"" have?<br>"@"Question: 64<br>The ""point"" object is created by the constructor function of the class ""Point"" and is initialized with two properties, ""x"" and<br>""y"", which are assigned the values passed as arguments (0 and 200, respectively) when the object is created.<br>Then the ""setColor"" method is called on the ""point"" object with the argument ""red"", which adds a new property ""color"" to<br>the ""point"" object and assigns it the value ""red"". Therefore, after the ""setColor"" method is called, the ""point"" object has<br>three properties: ""x"", ""y"", and ""color"", with their respective values of 0, 200, and ""red"".<br>"@color@0@"x, y, color"@1@"x, y"@0@"None of the above"@0
"JavaScript Zertifikat"@"In the following code snippet, what line of code should be inserted to declare a method named showInfo that outputs the<br>string ""Hi"" to the console?<br>class A {<br> // insert code here<br>}<br>let a = new A();<br>console.log(a.showInfo()); <br>"@"Question: 65<br>The line of code that should be inserted to declare a method named showInfo that outputs the string ""Hi"" to the console<br>is:<br>showInfo = function() { return ""Hi""; } <br>Note that the showInfo() method should be declared within the class A so that instances of the class have access to it.<br>The method can then be called on an instance of A, which in this case is a.<br>"@"let showInfo = function() { console.log(""Hi""); } "@0@"showInfo = function() { return ""Hi""; } "@1@"showInfo() { return ""Hi""; } "@0@"function showInfo() { return ""Hi""; } "@0
"JavaScript Zertifikat"@"If, if in the declaration of class B, you want it to inherit from A. You would write...<br>"@"Question: 66<br>To make class B inherit from class A, you would use the extends keyword followed by the parent class name in the class<br>declaration. Here is an example:<br>class A {<br>  // ...<br>}<br>class B extends A {<br>  // ...<br>}<br>"@"class B inherits A "@0@"class B extends A "@1@"class A inherits A "@0@"class A inherits B "@0@"In this example, class B extends class A, meaning that it inherits all of the properties and methods of class "@0
"JavaScript Zertifikat"@"What will be the output of the following code:<br>class Circle { <br> _radius = 0; <br> set radius(value) { <br>  this._radius = value; <br> } <br> get radius() { <br>  return this._radius; <br> } <br>}<br>let circle = new Circle(); <br>circle.radius = 5; <br>console.log(circle.radius); <br>"@"Question: 67<br>The output of the code will be 5.<br>Explanation:<br>The Circle class defines a private property _radius and a getter and a setter for the property. When an instance of the<br>Circle class is created, the setter method for the radius property is called and the value 5 is assigned to the private<br>_radius property.<br>Then, the console.log(circle.radius) statement retrieves the value of the radius property by calling the getter method,<br>which returns the value of the private _radius property. This value is 5, so it is printed to the console.<br>"@0@0@undefined@0@null@0@5@1
"JavaScript Zertifikat"@"What line of code should be inserted in the following code snippet to declare a private property _number and initialize it<br>with the value 30?<br>class Person {<br> // insert line of code here<br>}<br>let person = new Person();<br>person._name = ""John""; <br>console.log(person._name);<br>"@"Question: 68<br>To declare a private property _number and initialize it with the value 30 using a constructor, the following line of code<br>can be added inside the Person class:<br> constructor() { <br> this._number = 30; <br>} <br>The updated code would look like:<br> class Person {   constructor() {    <br>   this._number = 30;  <br>  }<br>} <br>let person = new Person();<br>person._name = ""John""; <br>console.log(person._name); <br>Note that private properties should not be accessed directly from outside the class. The _name property in this example<br>should also be declared as private if it is not intended to be accessed from outside the class.<br>"@"_name = 30; "@0@"constructor() {  this._name = 30 }"@1@"var _name = 30; "@0@"let _name = 30; "@0
"JavaScript Zertifikat"@"What line of code should be inserted in the following code snippet to declare a private property _age and initialize it with<br>the value 30?<br>class Person <br>{ <br> // insert line of code here <br>} <br>let person = new Person(); <br>person._age = 30; <br>console.log(person._age); <br>"@"Question: 69<br>The missing line should be _age = 0; as it initializes the private property _age with a default value of zero. In JavaScript,<br>private properties can be declared using the # symbol, like #age. However, this is not yet standardized and is currently<br>only supported in certain JavaScript engines.<br>In this case, _age is used instead, which is a convention used to indicate that the property is private and should not be<br>accessed directly from outside the class. The reason why _age is set to 0 is to ensure that it is defined even if it is not<br>explicitly set when creating a new instance of the Person class.<br>"@"var _age = 0;"@0@"_age = 0;"@1@"let _age = 0;"@0@"this._age = 0;"@0
"JavaScript Zertifikat"@"In the following code snippet, what line of code should be inserted to declare a property x and initialize it with the value<br>10?<br>class A { <br>// insert line of code here <br>} <br>let a = new A(); <br>a._x = 10; <br>console.log(a._x); <br>"@"Question: 70<br>In the given code snippet, _x = 0 should be inserted to declare a property x and initialize it with the value 10.<br>In JavaScript, properties of an object can be added and initialized dynamically, meaning they can be added and initialized<br>to an object after it is created. In the given code snippet, the constructor is not defined, so the property cannot be<br>initialized inside it.<br>Therefore, the property should be declared before it is initialized, and the initialization can be done when the object is<br>created. The property name should not begin with an underscore as it is not a standard naming convention, but it will not<br>cause any errors. The correct line of code to declare and initialize the property is:<br>class A {<br>  _x = 0;<br>}<br>let a = new A();<br>a._x = 10;<br>console.log(a._x);<br>This code will output 10 to the console as the property _x is initialized to 0 and then updated to 10.<br>"@"let _x = 0; "@0@"this._x = 0; "@0@"var _x = 0; "@0@"_x = 0; "@1
"JavaScript Zertifikat"@"What will appear in the console as a result of executing the following code snippet?<br>class User { <br>constructor(name, role) <br> {<br>  this.name = name; <br>  this.role = role; <br> }<br>}<br>let user = new User(""John"", ""admin""); <br>console.log(`${typeof(user)} ${user instanceof User}`); <br>"@"Question: 71<br>The code will output the following to the console:<br>object true<br>This is because:<br>The typeof(user) expression returns ""object"", which indicates that user is an object.<br>The user instanceof User expression returns true, which indicates that user is an instance of the User class.<br>"@"User true"@0@"object true"@1@"object false"@0@"User false"@0
"JavaScript Zertifikat"@"What will appear on the console when the following code is executed:<br>class Square { <br> _sideLength = 0;<br> set sideLength(value) { <br>  this._sideLength = value; <br> }<br> get sideLength() { <br> return this._sideLength; <br> } <br>}<br>let square = new Square(); <br>square.sideLength = 10; <br>console.log(square.sideLength) <br>"@"Question: 72<br>The output of the code will be 10.<br>Explanation:<br>The code declares a Square class with a private property _sideLength, and getter/setter methods for accessing/modifying<br>its value. It then creates a new instance of Square and sets its sideLength property to 10. Finally, it logs the value of<br>square.sideLength to the console, which will be 10 since that is the value that was just set.<br>"@undefined@0@10@1@0@0@"TypeError "@0
"JavaScript Zertifikat"@"Analyze the following code<br>class Shape { <br> getName() { <br>  return ""Shape""; <br> }<br>}<br>class Circle extends Shape { <br> getName() { <br>  return ""Circle""; <br> }<br> test(x) {<br>  return x? this.getName() : super.getName();<br> }<br>}<br>let circle = new Circle(); <br>console.log(`${circle.test(true)} ${circle.test(false)}`); <br>"@"Question: 73<br>This code defines two classes Shape and Circle. Circle extends Shape.<br>Shape class has a method getName() that returns the string ""Shape"".<br>Circle class has a method getName() that returns the string ""Circle"", which overrides the implementation in the Shape<br>class. The Circle class also has a method test(x) that takes a boolean parameter x. If x is true, the test() method calls the<br>getName() method of the Circle class and returns the string ""Circle"". Otherwise, it calls the getName() method of the<br>Shape class using the super keyword and returns the string ""Shape"".<br>The code creates an instance of the Circle class and calls the test() method twice with true and false as arguments,<br>respectively. The output of the console.log() statement is the string ""Circle Shape"".<br>"@"Shape Circle"@0@"Shape Shape"@0@"Circle Shape"@1@"Circle Circle"@0
"JavaScript Zertifikat"@"What will be the output when the following code is executed:<br>class Vehicle {<br> _make = """";<br> set make(value) {<br>  this._make = value;<br> }<br> get make() {<br> return this._make;<br> }<br>}<br>class Car extends Vehicle {<br> _model = """";<br> set model(value) {<br>  this._model = value;<br> }<br> get model() {<br> return this._model;<br> }<br>} <br>let car = new Car(); <br>car.make = ""Toyota""; <br>car.model = ""Camry""; <br>console.log(${car.make} ${car.model}); <br>"@"Question: 74<br>The output will be: Toyota Camry.<br>This code declares a class Vehicle with a private property _make and a getter/setter to access it. It also declares a<br>subclass Car which extends Vehicle and has its own private property _model and getter/setter for it.<br>The code then creates a new instance of Car and sets its make and model properties to ""Toyota"" and ""Camry""<br>respectively. Finally, it logs the value of car.make and car.model to the console using string interpolation.<br>"@"undefined Camry"@0@"Toyota Camry"@1@"Toyota undefined"@0@"Camry Toyota"@0
"JavaScript Zertifikat"@"What will be the output when the following code is executed:<br>class Car { <br> _brand = """";<br> set brand(value) { <br> this._brand = value; <br> } <br> get brand() { <br> return this._brand; <br> } <br>} <br>let car = new Car(); <br>car.brand = ""Toyota""; <br>console.log(car.brand) <br>"@"Question: 75<br>The output of the code will be:<br>Toyota<br>Explanation:<br>The class Car defines a private property _brand, which is accessed through a setter and a getter method.<br>An instance of Car is created using the new operator and assigned to the variable car.<br>The brand setter method is called on the car object with the argument ""Toyota"", which sets the value of the private<br>property _brand to ""Toyota"".<br>The brand getter method is called on the car object, which returns the value of the _brand property, which is ""Toyota"".<br>The output of console.log(car.brand) is ""Toyota"".<br>"@Toyota@1@"undefined Toyota"@0@null@0@undefined@0
"JavaScript Zertifikat"@"Which of the following options is the correct code to declare a class Circle with a radius property, a method to set the<br>radius and a method to calculate the area?<br>radius;  }  calculateArea() {  return Math.PI * this.radius * this.radius;  } }<br>* this.r * this.r;  } } <br>this.radius;  }  constructor(radius) {  this.radius = radius;  } }<br>{  return Math.PI * radius * radius;  } } <br>"@"Question: 76<br>This code is correct because it declares a class Circle with a constructor that takes a radius parameter and initializes the<br>radius property with it. The setRadius method allows the radius property to be updated after the Circle object has been<br>created. The calculateArea method uses the radius property to calculate the area of the circle using the formula Ï€rÂ².<br>This class encapsulates the state and behavior of a circle object, and provides a way to calculate its area by exposing a<br>public method.<br>"@"class Circle {  constructor(radius) {  this.radius = radius;  }  setRadius(radius) {  this.radius ="@1@"class Circle {  constructor(r) {  this.r = r;  }  setRadius(radius) {  this.r = radius;  } calculateArea() {  return Math.PI"@0@"class Circle {  setRadius(radius) {  this.radius = radius;  }  calculateArea() {  return Math.PI * this.radius *"@0@"class Circle {  constructor(radius) {  this.radius = radius;  }  setRadius(r) {  this.radius = r;  }  calculateArea(radius)"@0
"JavaScript Zertifikat"@"Analyze the following code:<br>let Shape = class {};<br>The syntax is:<br>"@"Question: 77<br>Yes, the syntax is correct. This creates a class named Shape and assigns it to the variable Shape using the class keyword<br>and the let keyword for variable declaration. However, this class does not have any properties or methods defined in it,<br>so it is an empty class.<br>"@"Incorrect, should instead be class Shape {};"@0@"Incorrect, the class definition cannot be empty."@0@"Incorrect, class definition should not be followed with a semi-colon"@0@Correct@1
"JavaScript Zertifikat"@"What is the correct code to declare a class Point with a constructor that takes two arguments x and y, and a method<br>setColor that sets the color property of the Point instance?<br>color; } <br>"@"Question: 78<br>This code is correct in declaring a class Point with a constructor that takes two arguments x and y, and a method setColor<br>that sets the color property of the Point instance.<br>In this code, the constructor method initializes the x and y properties of the Point instance, while the setColor method<br>sets the color property of the Point instance.<br>"@"class Point {  constructor(x, y) {  this.x = x; this.y = y;  } } Point.prototype.setColor = function(color) { this.color ="@0@"class Point {  constructor(x, y);  setColor(color) { this.color = color; }}"@0@"class Point { constructor(x, y) {  this.x = x;  this.y = y; } setColor = function(color) {  this.color = color; }}"@1@"function Point(x, y) {  this.x = x; this.y = y; } Point.prototype.setColor = function(color) {  this.color = color; } "@0
"JavaScript Zertifikat"@"What is the output of the following code snippet?<br>class Base { <br> greeting() { <br>  return ""Hello from Base""; <br> }<br>}<br>class Child extends Base {<br> greeting() {<br>  return ""Hello from Child"";<br> }<br> sayGreeting() {<br>  return super.greeting();<br> }<br>}<br>let child = new Child(); <br>console.log(child.sayGreeting());<br>"@"Question: 79<br>The output of the code snippet will be ""Hello from Base"".<br>This is because sayGreeting method of the Child class calls the greeting method of its parent class Base using the super<br>keyword. Since greeting is overridden in the Child class, the super keyword refers to the greeting method of the Base<br>class, which returns ""Hello from Base"".<br>"@Error@0@"Hello from Child"@0@undefined@0@"Hello from Base"@1
"JavaScript Zertifikat"@"class User {}; <br>let user = new User(); <br>console.log(`${typeof(user)} ${user instanceof User}`); <br>"@"Question: What is the output of the following code snippet?<br>The output of the code snippet will be:<br>object true<br>Explanation:<br>The code declares a class User and creates an instance of it using the new operator, which is assigned to the variable<br>user.<br>The first console.log statement uses a template literal to print the type of user and whether it is an instance of User.<br>Since user is an instance of User, user instanceof User returns true. The typeof operator applied to an object always<br>returns ""object"". So the first console.log statement will print ""object true"".<br>"@"User true"@0@"object false"@0@"string false"@0@"object true"@1
"JavaScript Zertifikat"@"Analyze the following code:<br>console.log(`${Boolean(true)} ${Boolean(""false"")} ${Number(false)} ${Number(""false"")}`); <br>What will appear on the console as a result of code execution<br>"@"Question: 81<br>The following will appear on the console as a result of the code execution:<br>true true 0 NaN<br>This is because:<br>Boolean(true) returns true, which is coerced to a string ""true"" through template literal interpolation.<br>Boolean(""false"") returns true, because the string ""false"" is non-empty and therefore truthy.<br>Number(false) returns 0, because false is equivalent to the number 0.<br>Number(""false"") returns NaN, because ""false"" is not a valid number and cannot be converted to a number.<br>"@"true true 0 NaN"@1@"false true 0 1"@0@"false false 0 NaN"@0@"true false 0 NaN"@0
"JavaScript Zertifikat"@"What is the output of the following code?<br>console.log(`${Boolean(false)} ${Boolean(""false"")} ${Number(false)} ${Number(""false"")}`);<br>"@"Question: 82<br>The output of the code will be:<br>false true 0 NaN<br>Explanation:<br>Boolean(false) returns false, which is a boolean value.<br>Boolean(""false"") returns true, because the string ""false"" is a truthy value (i.e., it is not an empty string, null, undefined, 0,<br>or NaN).<br>Number(false) returns 0, because the boolean value false has a numeric value of 0.<br>Number(""false"") returns NaN, because the string ""false"" cannot be converted to a number.<br>"@"false false 0 NaN"@0@"false true 0 0"@0@"false true 0 NaN"@1@"true true 1 0"@0
"JavaScript Zertifikat"@"What is the result of the following expression:<br>typeof(null) <br>"@"Question: 83<br>The result of the expression typeof(null) is ""object"". This is a known quirk of JavaScript - null is technically an object, even<br>though it is meant to represent the absence of any object value.<br>"@number@0@object@1@undefined@0@null@0
"JavaScript Zertifikat"@"What is the value of the following expression:<br>""5"" + 3 <br>"@"Question: 84<br>The value of the expression ""5"" + 3 is ""53"".<br>When the + operator is used with a string and a number, the number is converted to a string and concatenated with the<br>string. In this case, ""5"" is a string and 3 is a number, so 3 is converted to the string ""3"" and concatenated with ""5"",<br>resulting in the string ""53"".<br>"@8@0@53@0@"""53"""@1@TypeError@0
"JavaScript Zertifikat"@"What is the value of the following expression:<br>var x = 10; <br>var y = 20; <br>var z = (y > x) ? ""y is greater than x"" : ""y is not greater than x""; <br>"@"Question: 85<br>The value of z will be ""y is greater than x"". This is because the conditional (ternary) operator ? : is used here to evaluate<br>whether the condition (y > x) is true or false. Since y is greater than x, the condition is true, and the value of z will be the<br>first operand (""y is greater than x"").<br>"@10@0@20@0@"""y is greater than x"""@1@"""y is not greater than x"""@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var num1 = 10; <br>var num2 = 20; <br>var result = (num2 === 20) ? ""yes"" : ""no"";<br>"@"Question: 86<br>In the given code, num1 is assigned the value 10 and num2 is assigned the value 20. The [removed]num2 === 20)<br>returns true because the value of num2 is 20, which is equal to 20. Therefore, the ternary operator ? evaluates to yes and<br>the value of result becomes yes.<br>"@10@0@20@0@"""yes"""@1@"""no"""@0
"JavaScript Zertifikat"@"A call to Date.now() will return:<br>"@"Question: 87<br>A call to Date.now() will return the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC, also<br>known as the Unix epoch.<br>"@"The number of milliseconds since 00:00:00 on 1 January 1970"@1@"The number of seconds since 00:00:00 on 1 January 1970"@0@"The current Date as a DateTime object"@0@"The number of milliseconds since 00:00:00 on 1 January 2000"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var name = ""John"";<br>var result = (typeof(name) === ""string"") ? true : false;<br>"@"Question: 88<br>The value of result will be true.<br>In this code, typeof is used to determine the data type of the variable name. Since name is assigned a string value ""John"",<br>the condition (typeof(name) === ""string"") will evaluate to true. Therefore, the value of result will be set to true.<br>"@"""John"""@0@true@1@false@0@"""string"""@0
"JavaScript Zertifikat"@"What will be logged to the console after the following code is executed?<br>var num1 = 10; <br>var num2 = 20; <br>console.log(num1 < num2); <br>"@"Question: 89<br>The code will output true to the console, since num1 is less than num2.<br>"@10@0@20@0@true@1@false@0
"JavaScript Zertifikat"@"Which methods allows you to replace selected elements of an array with other elements given in the method call?<br>"@"Question: 90<br>The splice() method can be used to replace selected elements of an array with other elements given in the method call.<br>"@slice@0@splice@1@set@0@replace@0
"JavaScript Zertifikat"@"What should be inserted at the marked location in the following code to log the second y value in the points array to the<br>console?<br>let points = [{x: 10, y: 20}, {x: 0, y: 30}, {x: 20, y: 100}];<br>//Insert line here <br>"@"Question: 91<br>You can log the second y value in the points array by adding the following line of code:<br>console.log(points[1].y);<br>This will access the second element of the points array (which has an index of 1), and then access its y property. The<br>value of this property will then be logged to the console.<br>"@console.log(points[2].y);@0@console.log(points[1].y);@1@console.log(points.y[1]);@0@console.log(points.x[1]);@0
"JavaScript Zertifikat"@"What is the output of the following code?<br>var name = ""John""; <br>var result = (typeof name === ""string"") ? true : false;<br>console.log(result);<br>var num1 = 10; <br>var num2 = 20; <br>console.log(num1 < num2);<br>let points = [{x: 10, y: 20}, {x: 0, y: 30}, {x: 20, y: 100}]; <br>console.log(points[1].y); <br>"@"Question: 92<br>The output of the code will be:<br>true true 30<br>The first console.log statement checks if the variable name is of type ""string"" using a ternary operator, and since it is a<br>string, the result is true.<br>The second console.log statement compares num1 with num2 using the < operator and since num2 is greater than<br>num1, the result is true.<br>The third console.log statement accesses the second element in the points array, which is the object {x: 0, y: 30}, and<br>then accesses its y property using dot notation, resulting in 30 being logged to the console.<br>"@"""John"" true 100"@0@"true true 30"@1@"""string"" false 100"@0@"true true 20"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var num = 10; <br>var result = (num >= 10) ? ""Greater or Equal to 10"" : ""Less than 10""; <br>"@"Question: 93<br>The code initializes a variable num with a value of 10, and then evaluates an expression that checks whether num is<br>greater than or equal to 10.<br>The expression uses a ternary operator, which is a shorthand way of writing an if-else statement. If the condition num >=<br>10 is true, then the value of the expression is ""Greater or Equal to 10"", otherwise it is ""Less than 10"".<br>Since num is equal to 10, the condition num >= 10 is true, and therefore the value of result will be ""Greater or Equal to<br>10"".<br>"@10@0@"""Greater or Equal to 10"@1@"""Less than 10"""@0@true@0
"JavaScript Zertifikat"@"What will be logged to the console after the following code is executed?<br>var myArray = [1, 2, 3, 4, 5]; <br>console.log(myArray.length);<br>"@"Question: 94<br>The code will log 5 to the console, which is the length of the myArray array.<br>"@1,2,3,4,5@0@"[1, 2, 3, 4, 5]"@0@5@1@0@0
"JavaScript Zertifikat"@"Which of the following statements about an object of the Set class in not true?<br>"@"Question: 95<br>The statement ""Each element of an object of the Set class consists of a key and a value"" is not true.<br>The Set class in JavaScript is a built-in object that allows you to store unique values of any type, whether primitive values<br>or object references. The values in a Set are not associated with keys, as in objects, but rather each value is itself a key.<br>In other words, a Set stores a collection of values that can be iterated in the order of insertion. Unlike an array, however,<br>a Set does not have indexes or keys associated with each value. Instead, each value in a Set is unique and serves as its<br>own key, which can be used to check for the presence or absence of the value in the Set.<br>"@"The Set class does exist in javascript"@0@"Order of data in a Set does not matter"@0@"Each elements of an object of the Set class consists of a key and a value"@1@"Set has an add method to insert elements"@0
"JavaScript Zertifikat"@"Which of the following statements about an object of the Map class is not true?<br>"@"Question: 96<br>The following statement is not true: ""Elements with the same key can be repeated in a Map object, provided they have<br>different values.""<br>In a Map object, each key can only occur once, and each key is associated with a corresponding value. If the same key is<br>used again in a subsequent Map operation, the old key-value pair will be replaced by the new one. This is one of the key<br>differences between a Map and an object in JavaScript, where keys can be repeated and the last key-value pair with the<br>same key will overwrite any previous ones.<br>"@"Elements with the same key can be repeated in a Map object, provided they have different values"@1@"You can use the spread operator on the Map class"@0@"The set method is used to insert a new element into a Map object"@0@"Map objects do exist in JavaScript"@0
"JavaScript Zertifikat"@"The shape object can be converted to JSON format using the built-in command:<br>"@"Question: 97<br>The shape object can be converted to JSON format using the built-in JSON.stringify() method.<br>"@JSON.parse(shape);@0@JSON.stringify(shape);@1@JSON(shape);@0@shape.toJSON();@0
"JavaScript Zertifikat"@"What will appear in the console as a result of a code execution?<br>console.log(`${Math.floor(5.4)} ${Math.ceil(1.2)} ${Math.round(2.5)}`)<br>"@"Question: 98<br>Math.floor(5.4) rounds down the number 5.4 to the nearest integer, which is 5.<br>Math.ceil(1.2) rounds up the number 1.2 to the nearest integer, which is 2.<br>Math.round(2.5) rounds the number 2.5 to the nearest integer, which is 3.<br>The console.log() function is used to print the values separated by spaces.<br>"@"6 2 3"@0@"5 1 3"@0@"6 1 2"@0@"5 2 3"@1
"JavaScript Zertifikat"@"What will appear in the console as a result of code execution?<br>console.log(`${""str"".match(""a"")}`) <br>"@"Question: 99<br>The code uses the match() method on the string ""str"" and passes the regular expression ""a"" as an argument. The match()<br>method searches the string for a match against the specified regular expression.<br>In this case, the regular expression ""a"" does not match any occurrence of the letter ""a"" in the string ""str"". Therefore, the<br>match() method returns null, indicating that no match was found.<br>When ${""str"".match(""a"")} is used within the template literal ${}, the resulting value is converted to a string. In this case,<br>since match() returned null, it is converted to the string ""null"", which is then logged to the console<br>"@false@0@null@1@-1@0@0@0
"JavaScript Zertifikat"@"What is the value of result after the following code is executed?<br>var str = ""Hello World!""; <br>var result = str.toUpperCase(); <br>"@"Question: 100<br>After executing the provided code, the value of result will be the string ""HELLO WORLD!"".<br>Explanation: The code uses the toUpperCase() method on the string variable str. The toUpperCase() method is a built-in<br>JavaScript method that converts all the characters in a string to uppercase letters.<br>In this case, the original string ""Hello World!"" is converted to uppercase, resulting in ""HELLO WORLD!"". The converted<br>string is then assigned to the variable result.<br>"@"""hello world!"""@0@"""Hello World!"""@0@"""HELLO WORLD!"""@1@11@0
"JavaScript Zertifikat"@"Analyze the following code:<br>let str = ""sample string"";<br>console.log(`${str.includes('s')} ${str.indexOf('s')} ${str.lastIndexOf('s')}`);<br>What will appear in the console?<br>"@"Question: 101<br>The includes() method checks if a string includes a specific substring and returns a boolean value of true or false. In this<br>case, the string str includes the substring 's', so str.includes('s') returns true.<br>The indexOf() method returns the index of the first occurrence of a specified substring within a string. In this case, the<br>first occurrence of 's' is at index 0, so str.indexOf('s') returns 0.<br>The lastIndexOf() method returns the index of the last occurrence of a specified substring within a string. In this case, the<br>last occurrence of 's' is at index 7, so str.lastIndexOf('s') returns 7.<br>"@"true 0 7"@1@"true 0 8"@0@"true 1 8"@0@"1 1 8"@0
"JavaScript Zertifikat"@"Which line of code returns the current year?<br>"@"Question: 102<br>The getFullYear() method is used to get the current year because it returns the year of a given date as a four-digit<br>number. If no parameter is provided, it returns the current year of the system's local time.<br>"@"new Date(Date.now()).getFullYear(); "@1@"new Date.now().getFullYear();"@0@"Date.now().getYear(); "@0@"Date().getFullYear(); "@0
"JavaScript Zertifikat"@"There is one line missing in the code below:<br>let x = [1, 2, 3, 4];<br>// Insert line of code here<br>console.log(result);<br>Which missing line will result in the console output ""1010""<br>"@"Question: 103<br>The missing line of code that will result in the console output ""1010"" is:<br>let result = x.reduce((x, y) => x + y, 1000);<br>This uses the reduce() method to add up all the elements in the array x, and starts the accumulation with the initial value<br>of 1000. So the final result will be 1010.<br>"@"let result = x.reduce((x, y) => x + 1000, y) "@0@"let result = x.reduce((x, y) => x, 1000 + y) "@0@"let result = x.reduce((x, y) => x + y, 1000) "@1@"let result = x.reduce((x, y) => x - y, 1000) "@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5]; <br>var result = arr.slice(1, 4); <br>"@"Question: 104<br>After the code is executed, the variable result will contain the values [2, 3, 4].<br>The slice() method returns a new array that contains a copy of elements from the original array, based on the provided<br>arguments. In this case, the slice() method is called on the arr array and the arguments 1 and 4 are provided. This means<br>that the slice() method will create a new array that contains a copy of elements starting from index 1 (the second<br>element) up to, but not including, index 4 (the fifth element). Therefore, the elements [2, 3, 4] will be copied into the new<br>array and assigned to the result variable.<br>"@"[1, 2, 3, 4, 5]"@0@"[2, 3, 4]"@1@"[1, 2, 3, 4]"@0@"[4, 5]"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var str = ""Hello World!""; <br>var result = str.slice(0, 5);<br>"@"Question: 105<br>After executing the code, the value of result will be ""Hello"".<br>The slice() method extracts a section of a string and returns it as a new string, without modifying the original string. In<br>this case, str.slice(0, 5) starts at index 0 of the str string and extracts up to (but not including) index 5, which includes the<br>characters ""H"", ""e"", ""l"", ""l"", and ""o"". Therefore, the value of result is ""Hello"".<br>"@"""Hello"""@1@"""Hello World"""@0@""" World!"""@0@"""llo W"""@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5];<br>var result = arr.slice(3); <br>"@"Question: 106<br>After the execution of the following code:<br>var arr = [1, 2, 3, 4, 5];<br>var result = arr.slice(3);<br>the variable result will contain the subarray [4, 5], which starts from the index 3 (inclusive) of the original array arr. The<br>slice() method creates a new array that includes elements from the starting index up to (but not including) the ending<br>index, or until the end of the array if no ending index is provided. In this case, since only one argument is provided, the<br>slice() method will include all elements from the starting index to the end of the array.<br>"@"[1, 2, 3, 4, 5]"@0@"[3, 4, 5]"@0@"[4, 5]"@1@"[1, 2, 3]"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5];<br>var result = arr.splice(2, 2); <br>"@"Question: 107<br>After the following code is executed, the value of result will be an array [3, 4], and the arr array will be modified to be [1,<br>2, 5].<br>Here's what's happening:<br>The splice() method is called on the arr array with arguments 2 and 2. This means that starting from index 2, two<br>elements (i.e., 3 and 4) will be removed from the array.<br>The splice() method returns the removed elements as a new array, which is assigned to the result variable.<br>"@"[1, 2, 3, 4, 5]"@0@"[1, 2, 5]"@0@"[3, 4]"@1@"[1, 2, 3, 4, 5, 3, 4]"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5];<br>var result = arr.splice(2, 0, 6, 7, 8);<br>"@"Question: 108<br>After the following code is executed, the value of arr will be [1, 2, 6, 7, 8, 3, 4, 5], and the value of result will be an empty<br>array [].<br>The splice() method is used to add or remove elements from an array. In this case, the splice() method is called with the<br>arguments 2 and 0, which means that no elements should be removed from the array. The elements 6, 7, and 8 are then<br>added to the array starting at index 2. The resulting array is [1, 2, 6, 7, 8, 3, 4, 5].<br>The splice() method returns an array of the removed elements, or an empty array if no elements were removed. In this<br>case, no elements were removed, so result is an empty array [].<br>"@"[1, 2, 3, 4, 5]"@0@"[6, 7, 8]"@0@"[1, 2, 3, 4, 5, 6, 7, 8]"@0@"[1, 2, 6, 7, 8, 3, 4, 5]"@1
"JavaScript Zertifikat"@"What will be the value of arr after the following code is executed?<br>var arr = [1, 2, 3, 4, 5];<br>arr.splice(2, 1, 6, 7, 8); <br>"@"Question: 109<br>After executing the above code, the value of arr will be [1, 2, 6, 7, 8, 4, 5].<br>The splice() method is used to add or remove elements from an array. In this case, the method is called on the arr array<br>with the arguments 2 (the index at which to start changing the array), 1 (the number of elements to remove from the<br>array), and 6, 7, 8 (the elements to add to the array).<br>So the element at index 2 (which is 3 in the original array) is removed and replaced with the elements 6, 7, and 8. The<br>resulting array is [1, 2, 6, 7, 8, 4, 5].<br>"@"[1, 2, 6, 7, 8, 4, 5]"@1@"[1, 2, 3, 4, 5]"@0@"[1, 2, 6, 7, 8, 3, 4, 5]"@0@"[1, 2, 6, 7, 8, 5]"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5];<br>var result = arr.join(""-"");<br>"@"Question: 110<br>The join() method is used to join all the elements of an array into a string. You can specify an optional separator<br>parameter, which is used to separate the elements of the array. If no separator is specified, the default separator is a<br>comma (,).<br>In the example provided, the join() method is called on the arr array with a hyphen (-) separator specified as an<br>argument. This means that each element in the array will be separated by a hyphen in the resulting string. The resulting<br>string is then stored in the result variable.<br>So, in this case, the value of result will be a string ""1-2-3-4-5"", where each number in the original array is separated by a<br>hyphen.<br>"@"[1, 2, 3, 4, 5]"@0@"""1,2,3,4,5"""@0@"""1-2-3-4-5"""@1@"""5-4-3-2-1"""@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [""apple"", ""banana"", ""cherry""]; <br>var result = arr.join(""-""); <br>"@"Question: 111<br>After the code is executed, the variable result will be a string ""apple-banana-cherry"", which is the original array arr<br>converted to a string using the join() method.<br>The join() method is used to convert the elements of an array into a string, with each element separated by a specified<br>separator (in this case, ""-"").<br>"@"[""apple"", ""banana"", ""cherry""]"@0@"""apple,banana,cherry"""@0@"""apple-banana-cherry"""@1@"""cherry-banana-apple"""@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5];<br>var result = arr.filter(function(num) { <br> return num % 2 === 0; <br>}); <br>"@"Question: 112<br>After the code is executed, the result variable will contain an array of even numbers, [2, 4]. This is because the filter()<br>method creates a new array with all elements that pass the test implemented by the provided function. In this case, the<br>provided function returns true for all even numbers in the original array, and false for all odd numbers.<br>"@"[1, 2, 3, 4, 5]"@0@[4]@0@"[4, 2]"@0@"[2, 4]"@1
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [3, 1, 4, 2, 5]; <br>var result = arr.sort();<br>"@"Question: 113<br>The value of result will be [1, 2, 3, 4, 5].<br>The sort() method sorts the elements of an array in place and returns the sorted array. By default, sort() sorts elements<br>alphabetically as strings, so in this case the result will be sorted in ascending order based on the string representation of<br>the numbers. To sort numerically, a comparison function can be passed as an argument to sort().<br>"@"[3, 1, 4, 2, 5]"@0@"[1, 2, 3, 4, 5]"@1@"[5, 4, 3, 2, 1]"@0@"[1, 2, 4, 5, 3]"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [1, 2, 3, 4, 5]; <br>var result = arr.map(function(num) { <br> return num * 2; <br>}); <br>"@"Question: 114<br>The value of result will be an array [2, 4, 6, 8, 10] containing the result of doubling each element in the original array arr.<br>The map() method creates a new array by applying a function to each element of an existing array. In this case, the<br>anonymous function passed to the map() method takes a number as input, multiplies it by 2, and returns the result. This<br>operation is applied to each element of the arr array, resulting in a new array where each element is double the<br>corresponding element in arr.<br>"@"[1, 2, 3, 4, 5]"@0@"[10, 8, 6, 4, 2]"@0@"[2, 4, 6, 8, 10]"@1@"[1, 4, 9, 16, 25]"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [{name: 'John', age: 20}, {name: 'Jane', age: 25}, {name: 'Jim', age: 30}]; <br>var result = arr.map(function(obj) {<br> return obj.age;<br>}).filter(function(age) {<br> return age >= 25;<br>}); <br>"@"Question: 115<br>The value of result will be an array [25, 30].<br>Here's how the code works:<br>The map() function is called on the arr array to create a new array containing the ages of each person in the original<br>array: [20, 25, 30].<br>The filter() function is then called on this new array to create another new array that only contains ages greater than or<br>equal to 25: [25, 30].<br>This final array is assigned to the result variable.<br>"@"[20, 25, 30]"@0@"[{name: 'Jane', age: 25}, {name: 'Jim', age: 30}]"@0@"[25, 30]"@1@[20]@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [{name: 'John', age: 20}, {name: 'Jane', age: 25}, {name: 'Jim', age: 30}]; <br>var result = arr.reduce(function(acc, obj) { <br> acc[obj.name] = obj.age; <br> return acc; <br>}, {});<br>"@"Question: 116<br>The reduce() method takes an array and reduces it to a single value by applying a function to each element of the array.<br>In this code, the reduce() method is called on the arr array with a callback function that takes two arguments: acc (the<br>accumulator) and obj (the current object in the array).<br>The initial value of the accumulator is an empty object {}. In each iteration, the callback function assigns a new property<br>to the accumulator with the key as the name property of the current object and the value as the age property of the<br>current object. Finally, the accumulator object is returned.<br>So the value of result will be an object with the following key-value pairs:<br>{   John: 20,   Jane: 25,   Jim: 30 }<br>"@"{John: 20, Jane: 25, Jim: 30}"@1@"[{name: 'Jane', age: 25}, {name: 'Jim', age: 30}]"@0@"[20, 25, 30]"@0@"{20, 25, 30}"@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var arr = [5, 12, 8, 130, 44];<br>var result = arr.find(function(element) {<br>return element > 10;<br>}); <br>"@"Question: 117<br>The value of result will be 12.<br>The find() method returns the first element in an array that satisfies a provided testing function. In this case, the testing<br>function is element > 10, which returns true for the second element of the array (12). Therefore, find() returns 12 and<br>assigns it to result.<br>"@"[5, 12, 8, 130, 44]"@0@"[12, 130, 44]"@0@12@1@undefined@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var str = ""The quick brown fox"";<br>var result = str.replace(/[aeiou]/gi, '*'); <br>"@"Question: 118<br>The value of result will be:<br>Th* q**ck br*wn f*x<br>Explanation:<br>The replace() method with the regular expression /[aeiou]/gi matches all vowels (a, e, i, o, u) in the string str and replaces<br>them with an asterisk *. The g and i flags in the regular expression make the search global and case-insensitive,<br>respectively.<br>"@"""Th* qck brwn fx"""@0@"""Th* quck brwn fx"""@0@"""Th qck brwn fx."""@0@"Th* q**ck br*wn f*x"@1
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>var str = ""Hello, World!"";<br>var result = str.match(/[A-Z]/g); <br>"@"Question: 119<br>The value of result will be [""H"", ""W""].<br>The regular expression [A-Z] matches any uppercase letter from A to Z. The g flag is used to perform a global search for<br>all matches in the input string str. The match() function returns an array of all matches found in the input string.<br>"@"[""Hello"", ""World""]"@0@"[""H"", ""W""]"@1@"[""H"", ""E"", ""L"", ""L"", ""O"", ""W"", ""O"", ""R"", ""L"", ""D""]"@0@null@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>function Animal(name) {<br> this.name = name; <br>}<br>Animal.prototype.getName = function() {<br> return this.name; <br>};<br>var a = new Animal(""Lion""); <br>var result = a.getName(); <br>"@"Question: 120<br>The value of result will be ""Lion"".<br>Explanation:<br>The Animal constructor function defines a property name and a method getName on its prototype.<br>The new keyword is used to create a new instance of the Animal class with the name ""Lion"".<br>The getName method is then called on the instance a, which returns the value of its name property, which is ""Lion"".<br>This value is assigned to the variable result.<br>"@Animal@0@Lion@1@undefined@0@ReferenceError@0
"JavaScript Zertifikat"@"What is the result of the following code and why?<br>const car = {<br> make: 'Tesla',<br> model: 'Model S',<br> displayMakeAndModel: function() {<br>  console.log(`The car is a ${this.make} ${this.model}.`);<br> }<br>};<br>const truck = { make: 'Ford', model: 'F-150' };<br>const displayTruckMakeAndModel = car.displayMakeAndModel.bind(truck);<br>displayTruckMakeAndModel(); <br>"@"Question: 121<br>The result of the code will be: ""The car is a Ford F-150.""<br>This is because the bind() method creates a new function that, when called, has its this keyword set to the provided<br>value, in this case, the truck object. So, when displayTruckMakeAndModel() is called, the this keyword inside the<br>displayMakeAndModel() method refers to the truck object, and the output is ""The car is a Ford F-150.""<br>"@"The car is a undefined undefined."@0@"The car is a Ford F-150."@1@"TypeError: car.displayMakeAndModel.bind is not a function. "@0@"The car is a Tesla Model S."@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>const person = { <br> name: ""John"", <br> sayHello: function() { <br>  return `Hello, my name is ${this.name}`; <br> } <br>}; <br>const sayHelloJohn = person.sayHello.bind({ name: ""John"" }); <br>const sayHelloJane = person.sayHello.bind({ name: ""Jane"" }); <br>console.log(sayHelloJohn()); <br>console.log(sayHelloJane()); <br>"@"Question: 122<br>The output of the code will be:<br>Hello, my name is John Hello, my name is Jane<br>This is because the sayHello method is bound to different objects using the bind method. When sayHelloJohn is called, it<br>returns ""Hello, my name is John"" because it was bound to an object with the name property set to ""John"". Similarly,<br>sayHelloJane returns ""Hello, my name is Jane"" because it was bound to an object with the name property set to ""Jane"".<br>"@"""Hello, my name is John"" ""Hello, my name is undefined"""@0@"""Hello, my name is John"" ""Hello, my name is John"""@0@"""Hello, my name is John"" ""Hello, my name is Jane"""@1@"""Hello, my name is undefined"" ""Hello, my name is undefined"""@0
"JavaScript Zertifikat"@"What will the following code return when executed?<br>let person = {<br> name: ""John Doe"",<br> greet: function() {<br>  console.log(`Hello, I am ${this.name}`);<br> }<br>} <br>let greetFriend = person.greet.bind(person);<br>greetFriend(); <br>"@"Question: 123<br>The output of the following code will be ""Hello, I am John Doe"".<br>When greetFriend() is called, it executes the greet() method on the person object, but since it is bound to person, the this<br>keyword inside the greet() method refers to person object. Therefore, it will log ""Hello, I am John Doe"" to the console.<br>"@"Hello, I am John Doe"@1@"ReferenceError: person is not defined  "@0@"TypeError: greetFriend is not a function "@0@"Hello, I am undefined"@0
"JavaScript Zertifikat"@"What is the correct way to make a GET request using the fetch API and extract JSON data from the response body?<br>}).then((response) => response.json()) .then((json) => console.log(json));<br>JSON.parse(data)).then((json) => console.log(json)); <br>"@"Question: 124<br>The code performs an HTTP GET request to 'https://api.example.com/data', and then it parses the response as JSON. After<br>that, it logs the resulting JavaScript object to the console.<br>"@"fetch('https://api.example.com/data').then((response) => response.json().text()).then((json) => console.log(json)); "@0@"fetch('https://api.example.com/data',{ method: 'GET', headers: { 'Content-Type': 'application/json' },"@0@"fetch('https://api.example.com/data').then((response) => response.json()).then((json) => console.log(json)); "@1@"fetch('https://api.example.com/data').then((response) => response.text()).then((data) =>"@0
"JavaScript Zertifikat"@"Which of the following correctly implements a JavaScript closure?<br>innerFunction;}<br>outerVariable;  } innerFunction(); } <br>"@"Question: 125<br>The innerFunction creates a closure by referencing the outerVariable that is defined in the outer scope. When<br>outerFunction is called, it returns innerFunction, which can then be assigned to a variable and called later to access the<br>outerVariable. This allows the value of outerVariable to persist even after outerFunction has finished executing.<br>"@"function outerFunction() { var outerVariable = ""outer""; return function innerFunction() { return outerVariable; }} "@1@"var outerVariable = ""outer"";function outerFunction() { return function innerFunction() { return outerVariable; }} "@0@"var outerVariable = ""outer"";function outerFunction() { var innerFunction = function() { return outerVariable; } return"@0@"function outerFunction() { var outerVariable = ""outer""; function innerFunction() { return"@0
"JavaScript Zertifikat"@"What will be the output in the console after the Promise.all method is executed?<br>const promise1 = Promise.resolve(3);<br>const promise2 = 42;<br>const promise3 = new Promise((resolve, reject) => {<br> setTimeout(resolve, 100, 'foo');<br>});<br>Promise.all([promise1, promise2, promise3]).then((values) => {<br> console.log(values);<br>}); <br>"@"Question: 126<br>The output in the console will be:<br>[3, 42, ""foo""]<br>This is because Promise.all waits for all the promises in the array to be resolved or rejected and returns an array of their<br>values in the same order as the promises were passed in.<br>In this case, promise1 resolves to 3, promise2 is already a resolved value of 42, and promise3 resolves to the string 'foo'<br>after a delay of 100ms due to the setTimeout function.<br>"@"[3, 42, 'foo'] B) [3, 42, Promise { 'foo' }]"@0@"[Promise { 3 }, 42, Promise { 'foo' }]"@0@"[3, 42, 'foo']"@1@"[Promise { 3 }, Promise { 42 }, Promise { 'foo' }]"@0
"JavaScript Zertifikat"@"What is the result of the following code, and why?<br>function add(a = 0, b = 0) {<br>  return a + b;<br>}<br>console.log(add(undefined, 5)); <br>"@"Question: 127<br>The result of the code will be 5.<br>When undefined is passed as a parameter, the default value of the parameter is used. In this case, since the value of a is<br>undefined, it will take the default value of 0 and the value of b is 5. Therefore, the function returns 0 + 5, which is 5.<br>"@"NaN, because undefined is not a valid value for a number."@0@"5, because a is defined as undefined and is therefore treated as the default value"@1@"NaN, because a is not defined"@0@"5, because both a and b are defined as default parameters"@0
"JavaScript Zertifikat"@"What is the output of the following code?<br>let array = [1, 2, 3];<br>let iterator = array[Symbol.iterator]();<br>console.log(iterator.next().value);<br>console.log(iterator.next().value);<br>console.log(iterator.next().value);<br>console.log(iterator.next().done); <br>"@"Question: 128<br>The output of the code will be:<br>1, 2, 3, true<br>Explanation:<br>The code creates an array [1, 2, 3] and gets an iterator object from it using the Symbol.iterator method.<br>Then, the code calls the next() method of the iterator object multiple times to retrieve the values from the iterator.<br>The first call to next() returns { value: 1, done: false }, so console.log(iterator.next().value) will print 1.<br>The second call to next() returns { value: 2, done: false }, so console.log(iterator.next().value) will print 2.<br>The third call to next() returns { value: 3, done: false }, so console.log(iterator.next().value) will print 3.<br>The fourth call to next() returns { value: undefined, done: true }, indicating that there are no more items to iterate over<br>in the array. Since done is true, the loop stops, and console.log(iterator.next().done) prints true.<br>"@"1, 2, undefined, false"@0@"1, 2, 3, false"@0@"1, 2, undefined, true"@0@"1, 2, 3, true"@1
"JavaScript Zertifikat"@"What will be the output of the following code?<br>const a = { x: 1 };<br>const b = { y: 2 };<br>const c = { ...a, b, z: 3 };<br>console.log(c);<br>"@"Question: 129<br>The output of the following code will be an object with properties x, y, and z and their corresponding values:<br>{ x: 1, y: { b: 2 }, z: 3 }<br>The code uses the object spread syntax (...) to create a new object c that combines the properties of objects a and b, and<br>adds two additional properties b and z. The property b in the resulting object will have the same value as in object b. The<br>order of the properties in the resulting object may vary between different JavaScript engines.<br>"@"{ x: 1, y: 2, z: 3}"@0@"{ y: 2 }"@0@"{x: 1, b: { y: 2 }, z: 3}"@1@undefined@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>let funA = function(a, b) {<br>return a + b;<br> }<br>let decor = function(fn) {<br>return function(arg1, arg2) {<br>    let result = fn(arg1, arg2);<br>    console.log(`result ${result}`);<br>    return result;<br> }<br>}<br>let funB = decor(funA)); <br>let result = funB(3, 4);<br>"@"Question: 130<br>The value of result will be 7.<br>In this code, the decor function is a higher-order function that takes in a function as an argument and returns a new<br>function that logs the result of calling the original function and then returns that result.<br>Here, funA is a function that takes in two arguments and returns their sum. funB is created by calling the decor function<br>and passing in funA as an argument. funB is therefore a new function that takes in two arguments, calls funA with those<br>arguments, logs the result of that call (which will be 7 in this case), and then returns that result.<br>Finally, result is assigned the value returned by calling funB with arguments 3 and 4, which is 7.<br>"@12@0@-1@0@7@1@1@0
"JavaScript Zertifikat"@"What will the following code output and why?<br>let numbers = [1, 2, 3, 4];<br>let add = (x, y) => x + y;<br>let result = numbers.reduce(add, 0);<br>console.log(result);<br>"@"Question: 131<br>The output of the code will be 10.<br>The reduce() method is used to reduce the array to a single value. It takes two parameters: a callback function and an<br>initial value. The callback function takes two arguments: the accumulator (which is the current value of the reduction)<br>and the current value of the array. In this case, the callback function is the arrow function add, which takes two<br>arguments and returns their sum. The initial value is 0.<br>So, the reduce() method will start with an accumulator of 0 and add each value of the numbers array to it, resulting in a<br>final value of 10.<br>"@"NaN, because add is not a valid function for the reduce method to use."@0@"10, because the reduce function will sum up all elements in the numbers array and return the result"@1@"undefined, because reduce is not a method of the Array object in JavaScript"@0@"0, because the second argument 0 passed to reduce will override any values in the numbers array"@0
"JavaScript Zertifikat"@"What will the output be after executing the following code?<br>let person = {<br> name: ""John"", greet: function () {<br>  return `Hello, ${this.name}`;<br> }<br>};<br>let friend = { name: ""Jane"" };<br>let greetFriend = person.greet.call(friend);<br>console.log(greetFriend); <br>"@"Question: 132<br>The output of the code will be ""Hello, Jane"".<br>The call() method is used to call a function with a given this value and arguments provided as a comma-separated list. In<br>this case, the person.greet() function is being called with the friend object as its this value using the call() method. The<br>this.name expression in the function will refer to the name property of the friend object, which is ""Jane"". Therefore, the<br>function will return the string ""Hello, Jane"".<br>"@"Uncaught TypeError: Cannot read property 'name' of undefined "@0@"Hello, John"@0@"Hello, Jane"@1@"[Function: greet] "@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>let person = {<br> name: 'John',<br> introduce: function() {<br>  console.log`(My name is ${this.name}`);<br> } <br>};<br>let introduce = person.introduce;<br>let person2 = { name: 'Jane' }; <br>introduce.call(person2); <br>"@"Question: 133<br>There is a syntax error in the code. The line console.log(My name is ${this.name}); is missing a parenthesis after<br>console.log. It should be console.log(My name is ${this.name});. Once this syntax error is corrected, the output of the<br>code will be:<br>My name is Jane<br>This is because the introduce function is called with the call() method, passing person2 as the this value. Therefore, the<br>value of this.name inside the introduce function will be 'Jane', which is the name property of person2.<br>"@"My name is Jane"@1@ReferenceError@0@"My name is John"@0@"TypeError "@0
"JavaScript Zertifikat"@"What is the difference between the async/await and Promises in JavaScript?<br>"@"Question: 134<br>Both async/await and Promises are used in JavaScript for handling asynchronous operations.<br>Promises represent a value that may not be available yet but will be resolved in the future. A Promise can be in one of<br>three states: pending, fulfilled, or rejected. You can attach callbacks to a Promise to handle the resolved value or any<br>error that occurs during the operation.<br>async/await is a syntactic sugar on top of Promises that makes writing asynchronous code look synchronous. An async<br>function always returns a Promise, and you can use the await keyword to pause the execution of an async function until a<br>Promise is resolved. It allows you to write asynchronous code in a way that looks like synchronous code.<br>Note this is technically subjective, but if a question comes up like this in the exam make sure to answer accordingly.<br>"@"async/await is the old way of doing asynchronous programming in JavaScript, and Promises are the new way."@0@"async/await is faster than Promises."@0@"async/await is easier to read and write than Promises."@1@"There is no difference, they are the same thing."@0
"JavaScript Zertifikat"@"Which of the following is the correct way to define a function with default parameters in JavaScript?<br>"@"Question: 135<br>The following function definition is the correct way to define a function with default parameters in [removed]<br>function add(a = 0, b = 0) {<br>  return a + b;<br>}<br>This function has two parameters a and b, which are assigned default values of 0 using the = operator. If no arguments<br>are passed to the function, the default values will be used. If arguments are passed, the default values will be overridden<br>by the passed values.<br>"@"function add(a = 0, b = 0) {return a + b;} "@1@"function add(a = 0; b = 0) {return a + b;}"@0@"function add(a = 0, b) {return a + b;} "@0@"function add(a, b) = 0 {return a + b;}"@0
"JavaScript Zertifikat"@"What will the following code log to the console?<br>let obj = { name: ""John"" };<br>let greeting = function(a, b, c) {<br> return `Hello, my name is ${this.name} and I know ${a}, ${b} and ${c}`;<br>};<br>let func = greeting.bind(obj, ""JavaScript"", ""HTML"", ""CSS"");<br>console.log(func()); <br>"@"Question: 136<br>The output of the code will be:<br>Hello, my name is John and I know JavaScript, HTML and CSS<br>The bind() method creates a new function that, when called, has its this keyword set to the provided object (obj in this<br>case) and with additional arguments that are passed as parameters (""JavaScript"", ""HTML"", ""CSS"" in this case). When<br>func() is called, it logs the returned string, which includes the name property of obj and the arguments passed to bind().<br>"@"TypeError: Cannot read property 'name' of undefined"@0@"Hello, my name is John and I know undefined, undefined, undefined"@0@"Hello, my name is undefined and I know JavaScript, HTML, CSS"@0@"Hello, my name is John and I know JavaScript, HTML and CSS"@1
"JavaScript Zertifikat"@"What will be the output of the following code?<br>const a = { x: 1 }; <br>const b = { y: 2 }; <br>const c = { ...a, ...b }; <br>console.log(c);<br>"@"Question: 137<br>The output of the following code will be an object with the properties of both a and b:<br>{ x: 1, y: 2 }<br>The spread operator (...) is used to combine the properties of the two objects into a new object c. The properties of a are<br>copied first, followed by the properties of b. If there are properties with the same name, the last property specified will<br>overwrite any previously defined properties with the same name.<br>"@"{ x: 1 }"@0@"{ y: 2 }"@0@"{ x: 1, y: 2 }"@1@undefined@0
"JavaScript Zertifikat"@"What will be the value of result after the following code is executed?<br>function outer(x) { <br>return function inner(y) { <br> return x + y; <br> }; <br>} <br>var add5 = outer(5);<br>var result = add5(10); <br>"@"Question: 138<br>The value of result will be 15.<br>Here's how the code works:<br>The outer function takes an argument x and returns an inner function inner.<br>The inner function takes an argument y and returns the sum of x and y.<br>When outer is called with the argument 5, it returns a function inner that adds 5 to its argument.<br>This returned function is assigned to the variable add5.<br>When add5 is called with the argument 10, it adds 5 to 10 and returns 15.<br>This value is then assigned to the variable result.<br>"@10@0@20@0@15@1@5@0
"JavaScript Zertifikat"@"What is the correct output of the following code:<br>var obj = {<br>  value: 10<br>};<br>var foo = function() {<br>  console.log(this.value);<br>};<br>var bar = function() {<br>  console.log(this.value);<br>};<br>var boundFoo = foo.call(obj);<br>var boundBar = bar.bind(obj)();<br>console.log(boundFoo === boundBar); <br>"@"Question: 139<br>The output of the code will be:<br>10 10 true<br>Explanation:<br>foo.call(obj) will invoke the foo function with obj as its this value, and will log 10 to the console.<br>bar.bind(obj)() will create a new function that is a copy of bar, with obj bound as its this value, and then immediately<br>invoke it, logging 10 to the console.<br>boundFoo === boundBar will be true, because both boundFoo and boundBar are just regular function calls that log 10,<br>and they are both invoked with obj as their this value.<br>"@"10 10 false"@0@"10 undefined false"@0@"10 10 true"@1@"undefined 10 false"@0
"JavaScript Zertifikat"@"Which of the following is the correct syntax for creating a generator function in JavaScript?<br>"@"Question: 140<br>The correct syntax for creating a generator function in JavaScript is using an asterisk (*) before the function name, like<br>this:<br>function* gen() {} <br>"@"gen() => {} "@0@"function gen() {} "@0@"*gen() {} "@0@"function *gen() {} "@1
"JavaScript Zertifikat"@"What is the difference between .then() and .catch() methods in JavaScript Promises?<br>"@"Question: 141<br>In JavaScript Promises, the .then() method is used to handle the successful fulfillment of a Promise, while the .catch()<br>method is used to handle the rejection of a Promise.<br>When a Promise is fulfilled, the function passed to .then() is executed with the value of the fulfilled Promise as its<br>argument. If the Promise is rejected, the function passed to .catch() is executed with the reason for rejection as its<br>argument.<br>Here's an example:<br>const promise = new Promise((resolve, reject) => {<br>  if (Math.random() < 0.5) {<br>    resolve(""Success!"");<br>  } else {<br>    reject(""Failure!"");<br>  }<br>});<br>promise<br>  .then((result) => {<br>    console.log(""Promise fulfilled:"", result);<br>  })<br>  .catch((error) => {<br>    console.log(""Promise rejected:"", error);<br>  });<br>In this example, if the random number is less than 0.5, the Promise is fulfilled with the value ""Success!"" and the .then()<br>method is called with this value. If the random number is greater than or equal to 0.5, the Promise is rejected with the<br>reason ""Failure!"" and the .catch() method is called with this reason.<br>"@"None of the above"@0@"Both methods can be used to handle resolved and rejected values interchangeably."@0@".then() is used to handle resolved values, while .catch() is used to handle rejected values."@1@".catch() is used to handle resolved values, while .then() is used to handle rejected values."@0
"JavaScript Zertifikat"@"What is the difference between using a generator function and a regular function to produce a sequence of values in<br>JavaScript?<br>called<br>"@"Question: 142<br>In JavaScript, a regular function returns a single value when it is called, while a generator function can produce a<br>sequence of values over time. A generator function is defined using an asterisk (*) character after the function keyword,<br>and it uses the yield keyword to return a value and pause the function execution until the next value is requested.<br>When a regular function is called, it executes from start to finish and returns a single value. In contrast, a generator<br>function returns an iterator that can be used to iterate over the sequence of values that it produces. Each time the<br>iterator's next() method is called, the generator function resumes execution and produces the next value in the<br>sequence.<br>The ability to produce a sequence of values over time makes generator functions useful for tasks such as lazy evaluation<br>and asynchronous programming. In addition, generator functions can be used to create infinite sequences of values,<br>whereas regular functions can only return a fixed number of values based on their input parameters.<br>"@"A generator function can pause and resume its execution, while a regular function runs to completion every time it is"@1@"A generator function is always asynchronous, while a regular function can be either asynchronous or synchronous."@0@"A generator function returns a generator object, while a regular function returns an array"@0@"A generator function can only be used once, while a regular function can be called multiple times"@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>function* fibonacci() { <br> let [prev, curr] = [0, 1]; <br> while (true) { <br>  [prev, curr] = [curr, prev + curr]; <br>  yield curr; <br> } <br>} <br>const sequence = fibonacci(); <br>let result = []; <br>for (let i = 0; i < 10; i++) { <br> result.push(sequence.next().value); <br>} <br>console.log(result); <br>"@"Question: 143<br>The output of the code will be an array containing the first 10 numbers in the Fibonacci sequence: [1, 2, 3, 5, 8, 13, 21,<br>34, 55, 89].<br>The code defines a generator function fibonacci that generates an infinite sequence of Fibonacci numbers. The while loop<br>in the function generates the next number in the sequence using destructuring assignment and the yield keyword.<br>The code then creates a generator object sequence from the fibonacci function.<br>A for loop is used to iterate over the first 10 values in the sequence, pushing each value onto the result array.<br>Finally, the result array is logged to the console, displaying the first 10 numbers in the Fibonacci sequence.<br>"@"[1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"@1@"[0, 2, 3, 5, 8, 13, 21, 34, 55, 89]"@0@"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"@0@"[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"@0
"JavaScript Zertifikat"@"What is the output of the following code and why?<br>let p = new Promise((resolve, reject) => { <br> setTimeout(() => { <br>  resolve(""Promise Resolved""); <br> }, 1000); <br>}); <br>p.then(result => console.log(result)); <br>console.log(""Finished""); <br>"@"Question: 144<br>The output of the code will be:<br>Finished Promise Resolved<br>This is because when the Promise is created, it starts executing the asynchronous operation (in this case, a 1 second<br>delay). While this operation is occurring, the rest of the code continues to execute. Therefore, ""Finished"" is printed to the<br>console before the Promise is resolved. Once the Promise is resolved, the .then() callback is invoked with the resolved<br>value and ""Promise Resolved"" is printed to the console.<br>"@Error@0@Nothing@0@"""Finished"" ""Promise Resolved"""@1@"""Promise Resolved"" ""Finished"""@0
"JavaScript Zertifikat"@"What will the following code return when executed?<br>let myIterable = {<br> *[Symbol.iterator]() {<br>  yield 1; yield 2; yield 3; <br> } <br>}; <br>let iterator = myIterable[Symbol.iterator]();<br>console.log(iterator.next().value);<br>console.log(iterator.next().value);<br>console.log(iterator.next().value);<br>console.log(iterator.next().done);<br>"@"Question: 145<br>"@"1, 2, 3, true"@1@"1, 2, undefined, true"@0@"1, 2, 3, false"@0@"1, 2, undefined, false"@0
"JavaScript Zertifikat"@"What is the output of the code below?<br>const person = {<br> firstName: 'John',<br> lastName: 'Doe',<br> getFullName: function() {<br>  return this.firstName + ' ' + this.lastName;<br> }<br>};<br>const printName = person.getFullName.bind({firstName: 'Jane', lastName: 'Smith'}); <br>console.log(printName());<br>"@"Question: 146<br>The output of the code will be ""Jane Smith"" because the bind() method creates a new function with the same body and<br>scope as the original function getFullName() but with a different this value. In this case, the this value is explicitly set to<br>an object with firstName set to 'Jane' and lastName set to 'Smith'. Therefore, when printName() is called, it returns ""Jane<br>Smith"".<br>"@"Jane Doe"@0@"Jane Smith"@1@"undefined undefined"@0@"John Doe"@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>let obj1 = {name: ""John""};<br>let obj2 = {age: 30};<br>let merge = function(a, b) { <br> return {...a, ...b}; <br>};<br>console.log(merge(obj1, obj2)); <br>"@"Question: 147<br>The output of the code will be an object containing properties from both obj1 and obj2, merged together using the spread<br>operator. The output should be:<br>{name: ""John"", age: 30}<br>"@"{ name: 'John', age: 30 }"@1@"{ age: 30 }"@0@"{  age: 30, name: 'John'}"@0@"[object Object]"@0
"JavaScript Zertifikat"@"What is the output of the following code snippet?<br>function add(a = 5, b = 10) { <br> return a + b; <br>} <br>console.log(add());<br>"@"Question: 148<br>The output of the code snippet will be 15.<br>When the add() function is called without any arguments, the default parameter values of a=5 and b=10 are used, and<br>the function returns the sum of the two, which is 15.<br>"@10@0@15@1@5@0@NaN@0
"JavaScript Zertifikat"@"What is the expected output of the following JavaScript code?<br>function* generator() { <br> yield 1; yield 2; yield 3; <br>} <br>const gen = generator(); <br>console.log(gen.next().value); <br>console.log(gen.next().value); <br>console.log(gen.next().value); <br>console.log(gen.next().value); <br>"@"Question: 149<br>The expected output of the following code is:<br>1 2 3 undefined<br>Explanation:<br>The generator function generator is defined to yield three values: 1, 2, and 3.<br>The gen variable is assigned the generator function by calling it.<br>The first console.log statement calls the next() method of the generator object gen and prints the value property of the<br>returned object, which is the first value yielded by the generator (1).<br>The second console.log statement calls the next() method again and prints the second value yielded by the generator (2).<br>The third console.log statement calls the next() method once more and prints the third value yielded by the generator<br>(3).<br>The fourth console.log statement calls the next() method again, but since there are no more values to yield, the value<br>property of the returned object is undefined, and the done property is true.<br>"@"1 2 3 Error"@0@"undefined undefined undefined undefined"@0@"1 2 3 undefined"@1@"1 2 3 null"@0
"JavaScript Zertifikat"@"What is the output of the following code?<br>const add = (a, b) => a + b; <br>const double = n => add(n, n); <br>console.log(double(3));<br>"@"Question: 150<br>The output of the code is 6.<br>The add function takes two arguments and returns their sum. The double function takes a single argument and calls add<br>function with that argument twice to get the sum of the number doubled. When double is called with 3, it returns<br>add(3,3) which is equal to 6, and this value is logged to the console.<br>"@6@1@9@0@12@0@15@0
"JavaScript Zertifikat"@"What is the correct way to wait for the result of a Promise before returning the final value in an asynchronous function?<br>"@"Question: 151<br>The correct way to wait for the result of a Promise before returning the final value in an asynchronous function is to use<br>the async/await syntax. Here's an example:<br>async function myAsyncFunction() {<br>  const result = await myPromiseFunction();<br>  return result;<br>}<br>In this example, myPromiseFunction() returns a Promise, and await is used to pause the execution of the function until<br>the Promise is resolved. The value of the resolved Promise is then stored in the result variable, which is returned by the<br>function.<br>"@"Use a .then() block to handle the resolved value."@0@"Wrap the Promise in a setTimeout() call."@0@"None of the above."@0@"Use the await keyword before the Promise."@1
"JavaScript Zertifikat"@"What is the output of the following JavaScript code?<br>let promise = new Promise((resolve, reject) => {<br> setTimeout(() => {<br> resolve(1)<br>}, 2000) });<br>promise.then((value) => {<br> console.log(value);<br> return value + 1;<br>}).then((value) => {<br> console.log(value);<br>});<br>"@"Question: 152<br>The output of the following code will be:<br>1 2<br>Explanation:<br>A promise is created that resolves with a value of 1 after a timeout of 2 seconds.<br>The then method is chained to the promise, which logs the resolved value of 1 to the console and returns the value + 1<br>(2).<br>Another then method is chained to the previous one, which logs the value of 2 to the console.<br>"@"1 undefined"@0@"undefined undefined"@0@"2 3"@0@"1 2"@1
"JavaScript Zertifikat"@"What will the following code output and why?<br>function logNum(num = 0, base = 10) {<br> console.log(Math.log(num) / Math.log(base));<br>}<br>logNum();<br>logNum(2);<br>logNum(2, 2);<br>logNum(undefined, 2);<br>"@"Question: 153<br>The code will output:<br>NaN 0 1 NaN<br>When the logNum() function is called without arguments, both num and base are assigned default values of 0 and 10,<br>respectively. Therefore, the expression Math.log(num) will evaluate to Math.log(0), which is -Infinity, and the expression<br>Math.log(num) / Math.log(base) will evaluate to -Infinity / 1, which is still NaN.<br>When logNum(2) is called, num is assigned a value of 2 and base takes its default value of 10. Therefore, the expression<br>Math.log(num) will evaluate to Math.log(2) which is approximately 0.6931, and the expression Math.log(num) /<br>Math.log(base) will evaluate to 0.6931 / 2.3026, which is approximately 0.<br>When logNum(2, 2) is called, num is assigned a value of 2 and base is also assigned a value of 2. Therefore, the<br>expression Math.log(num) will evaluate to Math.log(2) which is approximately 0.6931, and the expression Math.log(num)<br>/ Math.log(base) will evaluate to 0.6931 / 0.6931, which is 1.<br>When logNum(undefined, 2) is called, num takes its default value of 0, and base is explicitly assigned a value of 2.<br>Therefore, the expression Math.log(num) will evaluate to Math.log(0), which is -Infinity, and the expression Math.log(num)<br>/ Math.log(base) will evaluate to -Infinity / 0.6931, which is NaN.<br>"@"NaN 0.6931471805599453 1 NaN"@1@"NaN NaN NaN NaN"@0@"0 0.6931471805599453 1 NaN"@0@"0 NaN 1 NaN"@0
"JavaScript Zertifikat"@"What will be the output in the following code, when executed?<br>const p1 = new Promise((resolve, reject) => {<br>  setTimeout(() => resolve(""Promise 1""), 1000);<br>});<br>const p2 = new Promise((resolve, reject) => {<br> setTimeout(() => resolve(""Promise 2""), 2000);<br>});<br>Promise.race([p1, p2]).then((value) => {<br>console.log(value);<br>});<br>"@"Question: 154<br>The output of the following code will be ""Promise 1"".<br>This is because the Promise.race() method takes an array of promises as its argument and returns a new promise that<br>resolves or rejects as soon as one of the promises in the array resolves or rejects. In this case, p1 resolves after 1 second<br>while p2 resolves after 2 seconds. Since p1 resolves first, the new promise returned by Promise.race() also resolves with<br>the value of p1, which is ""Promise 1"". Therefore, the then() method logs ""Promise 1"" to the console.<br>"@Error@0@"Promise 2"@0@"Promise 1"@1@"[Promise 2, Promise 1]"@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>function outerFunction(num) {<br> return function innerFunction(num2) {<br>  return num + num2;<br> };<br>}<br>let add5 = outerFunction(5);<br>console.log(add5(3)); <br>"@"Question: 155<br>The output of the code will be 8.<br>The outerFunction returns a function innerFunction, which takes a parameter num2. When add5 is assigned the value of<br>outerFunction(5), it effectively becomes the innerFunction with num set to 5. Therefore, when add5(3) is called, it returns<br>the result of num + num2, which is 5 + 3 = 8.<br>"@undefined@0@3@0@8@1@5@0
"JavaScript Zertifikat"@"What is the output of the following JavaScript code?<br>function* idMaker() {<br> let index = 0;<br> while (true)<br>  yield index++;<br>} <br>let gen = idMaker();<br>console.log(gen.next().value);<br>console.log(gen.next().value);<br>console.log(gen.next().value);<br>"@"Question: 156<br>The output of the following JavaScript code will be:<br>0 1 2<br>Explanation:<br>The idMaker function is a generator function that yields an infinite sequence of incrementing values starting from 0.<br>When the gen generator object is created using the idMaker function, the first gen.next() call will execute the generator<br>until the first yield statement and return the value 0. The subsequent calls to gen.next() will continue execution of the<br>generator, incrementing the index variable and returning the next value in the sequence.<br>"@"NaN NaN NaN"@0@"0 1 2"@1@"null null null"@0@"undefined undefined undefined"@0
"JavaScript Zertifikat"@"What will be the output of the following code?<br>var x = 10;<br>var obj = {<br> x: 20,<br> method: function() { <br>  console.log(this.x);<br> }<br>};<br>var func = obj.method.bind({x: 30});<br>func();<br>"@"Question: 157<br>The output of the code will be 30.<br>Here's why:<br>obj is an object with a property x set to 20 and a method method.<br>func is a new function created by calling the bind method on the method function with {x: 30} as its argument.<br>When func is called, this inside the method function refers to the object {x: 30} that was passed to the bind method, not<br>obj. Therefore, this.x refers to 30, not 20. So func() logs 30 to the console.<br>"@undefined@0@30@1@10@0@20@0
"JavaScript Zertifikat"@"What is the result of the following code?<br>const promise = new Promise((resolve, reject) => {<br> setTimeout(() => {<br>  resolve(""Resolved!"");<br> }, 2000);<br>});<br> promise<br> .then(response => {<br>  console.log(response);<br>  return ""Then Called"";<br> })<br> .then(response => console.log(response))<br> .catch(error => console.log(error)); <br>"@"Question: 158<br>The result of the code will be:<br>Resolved! Then Called<br>The promise object is created with a callback function that will resolve after 2 seconds with the string ""Resolved!"". After<br>that, the then method is called on the promise object with a callback function that logs the response to the console and<br>returns a new string ""Then Called"". The second then method is called with another callback function that logs the<br>returned string to the console. Since there is no reject method called on the promise, the catch method is not triggered<br>and nothing is logged to the console.<br>"@"An error message"@0@Resolved!@0@"Resolved! Then Called"@1@"Then Called"@0
"JavaScript Zertifikat"@"What will the following JavaScript code log to the console?<br>let promise = new Promise((resolve, reject) => {<br> resolve(""done""); <br>});<br>promise.then(data => {<br> console.log(data);<br> return ""done2"";<br>}).then(data => {<br> console.log(data);<br>});<br>"@"Question: 159<br>The following code will log the following to the console:<br>done done2<br>The promise is resolved with the value ""done"", which is passed as the argument to the first then() method. This method<br>logs ""done"" to the console, and then returns the value ""done2"". The second then() method is called with the value<br>""done2"", which is logged to the console.<br>"@"None of the above"@0@"""done2"""@0@"""done"" ""done2"""@1@"""done"""@0
